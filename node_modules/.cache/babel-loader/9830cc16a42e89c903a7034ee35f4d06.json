{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;\n\nconst web3_utils_1 = require(\"web3-utils\");\n\nconst config_1 = require(\"./config\");\n\nfunction parseEip3770Address(fullAddress) {\n  const parts = fullAddress.split(':');\n  const address = parts.length > 1 ? parts[1] : parts[0];\n  const prefix = parts.length > 1 ? parts[0] : '';\n  return {\n    prefix,\n    address\n  };\n}\n\nexports.parseEip3770Address = parseEip3770Address;\n\nfunction getEip3770NetworkPrefixFromChainId(chainId) {\n  const network = config_1.networks.find(network => chainId === network.chainId);\n\n  if (!network) {\n    throw new Error('No network prefix supported for the current chainId');\n  }\n\n  return network.shortName;\n}\n\nexports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;\n\nfunction isValidEip3770NetworkPrefix(prefix) {\n  return config_1.networks.some(_ref => {\n    let {\n      shortName\n    } = _ref;\n    return shortName === prefix;\n  });\n}\n\nexports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;\n\nfunction validateEip3770NetworkPrefix(prefix, currentChainId) {\n  const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);\n\n  if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {\n    throw new Error('The network prefix must match the current network');\n  }\n}\n\nexports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;\n\nfunction validateEthereumAddress(address) {\n  const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);\n\n  if (!isValidAddress) {\n    throw new Error(`Invalid Ethereum address ${address}`);\n  }\n}\n\nexports.validateEthereumAddress = validateEthereumAddress;\n\nfunction validateEip3770Address(fullAddress, currentChainId) {\n  const {\n    address,\n    prefix\n  } = parseEip3770Address(fullAddress);\n  validateEthereumAddress(address);\n\n  if (prefix) {\n    validateEip3770NetworkPrefix(prefix, currentChainId);\n  }\n\n  return {\n    address,\n    prefix\n  };\n}\n\nexports.validateEip3770Address = validateEip3770Address;","map":{"version":3,"sources":["../../../src/eip-3770/index.ts"],"names":[],"mappings":";;;;;;;AACA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,SAAgB,mBAAhB,CAAoC,WAApC,EAAuD;AACrD,QAAM,KAAK,GAAG,WAAW,CAAC,KAAZ,CAAkB,GAAlB,CAAd;AACA,QAAM,OAAO,GAAG,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB,KAAK,CAAC,CAAD,CAAxB,GAA8B,KAAK,CAAC,CAAD,CAAnD;AACA,QAAM,MAAM,GAAG,KAAK,CAAC,MAAN,GAAe,CAAf,GAAmB,KAAK,CAAC,CAAD,CAAxB,GAA8B,EAA7C;AACA,SAAO;AAAE,IAAA,MAAF;AAAU,IAAA;AAAV,GAAP;AACD;;AALD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAOA,SAAgB,kCAAhB,CAAmD,OAAnD,EAAkE;AAChE,QAAM,OAAO,GAAG,QAAA,CAAA,QAAA,CAAS,IAAT,CAAe,OAAD,IAAa,OAAO,KAAK,OAAO,CAAC,OAA/C,CAAhB;;AACA,MAAI,CAAC,OAAL,EAAc;AACZ,UAAM,IAAI,KAAJ,CAAU,qDAAV,CAAN;AACD;;AACD,SAAO,OAAO,CAAC,SAAf;AACD;;AAND,OAAA,CAAA,kCAAA,GAAA,kCAAA;;AAQA,SAAgB,2BAAhB,CAA4C,MAA5C,EAA0D;AACxD,SAAO,QAAA,CAAA,QAAA,CAAS,IAAT,CAAc;AAAA,QAAC;AAAE,MAAA;AAAF,KAAD;AAAA,WAAmB,SAAS,KAAK,MAAjC;AAAA,GAAd,CAAP;AACD;;AAFD,OAAA,CAAA,2BAAA,GAAA,2BAAA;;AAIA,SAAgB,4BAAhB,CAA6C,MAA7C,EAA6D,cAA7D,EAAmF;AACjF,QAAM,sBAAsB,GAAG,MAAM,KAAK,kCAAkC,CAAC,cAAD,CAA5E;;AACA,MAAI,CAAC,2BAA2B,CAAC,MAAD,CAA5B,IAAwC,CAAC,sBAA7C,EAAqE;AACnE,UAAM,IAAI,KAAJ,CAAU,mDAAV,CAAN;AACD;AACF;;AALD,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAOA,SAAgB,uBAAhB,CAAwC,OAAxC,EAAuD;AACrD,QAAM,cAAc,GAAG,CAAA,GAAA,YAAA,CAAA,WAAA,EAAY,OAAZ,KAAwB,CAAA,GAAA,YAAA,CAAA,SAAA,EAAU,OAAV,CAA/C;;AACA,MAAI,CAAC,cAAL,EAAqB;AACnB,UAAM,IAAI,KAAJ,CAAU,4BAA4B,OAAO,EAA7C,CAAN;AACD;AACF;;AALD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAOA,SAAgB,sBAAhB,CACE,WADF,EAEE,cAFF,EAEwB;AAEtB,QAAM;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,MAAsB,mBAAmB,CAAC,WAAD,CAA/C;AACA,EAAA,uBAAuB,CAAC,OAAD,CAAvB;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,4BAA4B,CAAC,MAAD,EAAS,cAAT,CAA5B;AACD;;AACD,SAAO;AAAE,IAAA,OAAF;AAAW,IAAA;AAAX,GAAP;AACD;;AAVD,OAAA,CAAA,sBAAA,GAAA,sBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateEip3770Address = exports.validateEthereumAddress = exports.validateEip3770NetworkPrefix = exports.isValidEip3770NetworkPrefix = exports.getEip3770NetworkPrefixFromChainId = exports.parseEip3770Address = void 0;\nconst web3_utils_1 = require(\"web3-utils\");\nconst config_1 = require(\"./config\");\nfunction parseEip3770Address(fullAddress) {\n    const parts = fullAddress.split(':');\n    const address = parts.length > 1 ? parts[1] : parts[0];\n    const prefix = parts.length > 1 ? parts[0] : '';\n    return { prefix, address };\n}\nexports.parseEip3770Address = parseEip3770Address;\nfunction getEip3770NetworkPrefixFromChainId(chainId) {\n    const network = config_1.networks.find((network) => chainId === network.chainId);\n    if (!network) {\n        throw new Error('No network prefix supported for the current chainId');\n    }\n    return network.shortName;\n}\nexports.getEip3770NetworkPrefixFromChainId = getEip3770NetworkPrefixFromChainId;\nfunction isValidEip3770NetworkPrefix(prefix) {\n    return config_1.networks.some(({ shortName }) => shortName === prefix);\n}\nexports.isValidEip3770NetworkPrefix = isValidEip3770NetworkPrefix;\nfunction validateEip3770NetworkPrefix(prefix, currentChainId) {\n    const isCurrentNetworkPrefix = prefix === getEip3770NetworkPrefixFromChainId(currentChainId);\n    if (!isValidEip3770NetworkPrefix(prefix) || !isCurrentNetworkPrefix) {\n        throw new Error('The network prefix must match the current network');\n    }\n}\nexports.validateEip3770NetworkPrefix = validateEip3770NetworkPrefix;\nfunction validateEthereumAddress(address) {\n    const isValidAddress = (0, web3_utils_1.isHexStrict)(address) && (0, web3_utils_1.isAddress)(address);\n    if (!isValidAddress) {\n        throw new Error(`Invalid Ethereum address ${address}`);\n    }\n}\nexports.validateEthereumAddress = validateEthereumAddress;\nfunction validateEip3770Address(fullAddress, currentChainId) {\n    const { address, prefix } = parseEip3770Address(fullAddress);\n    validateEthereumAddress(address);\n    if (prefix) {\n        validateEip3770NetworkPrefix(prefix, currentChainId);\n    }\n    return { address, prefix };\n}\nexports.validateEip3770Address = validateEip3770Address;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}