{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;\n\nconst safe_deployments_1 = require(\"@gnosis.pm/safe-deployments\");\n\nconst config_1 = require(\"./config\");\n\nfunction getSafeContractDeployment(safeVersion, chainId) {\n  let isL1SafeMasterCopy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;\n  const filters = {\n    version,\n    network: chainId.toString(),\n    released: true\n  };\n\n  if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {\n    return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);\n  }\n\n  return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);\n}\n\nexports.getSafeContractDeployment = getSafeContractDeployment;\n\nfunction getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;\n  return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;\n\nfunction getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;\n  return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;\n\nfunction getMultiSendContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;\n  return (0, safe_deployments_1.getMultiSendDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getMultiSendContractDeployment = getMultiSendContractDeployment;\n\nfunction getSafeProxyFactoryContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;\n  return (0, safe_deployments_1.getProxyFactoryDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;\n\nfunction getSignMessageLibContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;\n  return (0, safe_deployments_1.getSignMessageLibDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;\n\nfunction getCreateCallContractDeployment(safeVersion, chainId) {\n  const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;\n  return (0, safe_deployments_1.getCreateCallDeployment)({\n    version,\n    network: chainId.toString(),\n    released: true\n  });\n}\n\nexports.getCreateCallContractDeployment = getCreateCallContractDeployment;\n\nasync function getSafeContract(_ref) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customSafeAddress,\n    isL1SafeMasterCopy,\n    customContracts\n  } = _ref;\n  const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);\n  const gnosisSafeContract = ethAdapter.getSafeContract({\n    safeVersion,\n    chainId,\n    singletonDeployment,\n    customContractAddress: customSafeAddress !== null && customSafeAddress !== void 0 ? customSafeAddress : customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(gnosisSafeContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('SafeProxy contract is not deployed on the current network');\n  }\n\n  return gnosisSafeContract;\n}\n\nexports.getSafeContract = getSafeContract;\n\nasync function getProxyFactoryContract(_ref2) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref2;\n  const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);\n  const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: proxyFactoryDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('SafeProxyFactory contract is not deployed on the current network');\n  }\n\n  return safeProxyFactoryContract;\n}\n\nexports.getProxyFactoryContract = getProxyFactoryContract;\n\nasync function getCompatibilityFallbackHandlerContract(_ref3) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref3;\n  const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);\n  const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: fallbackHandlerDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('CompatibilityFallbackHandler contract is not deployed on the current network');\n  }\n\n  return fallbackHandlerContract;\n}\n\nexports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;\n\nasync function getMultiSendContract(_ref4) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref4;\n  const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);\n  const multiSendContract = await ethAdapter.getMultiSendContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: multiSendDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('MultiSend contract is not deployed on the current network');\n  }\n\n  return multiSendContract;\n}\n\nexports.getMultiSendContract = getMultiSendContract;\n\nasync function getMultiSendCallOnlyContract(_ref5) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref5;\n  const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);\n  const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: multiSendCallOnlyDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('MultiSendCallOnly contract is not deployed on the current network');\n  }\n\n  return multiSendCallOnlyContract;\n}\n\nexports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;\n\nasync function getSignMessageLibContract(_ref6) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref6;\n  const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);\n  const signMessageLibContract = await ethAdapter.getSignMessageLibContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: signMessageLibDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('SignMessageLib contract is not deployed on the current network');\n  }\n\n  return signMessageLibContract;\n}\n\nexports.getSignMessageLibContract = getSignMessageLibContract;\n\nasync function getCreateCallContract(_ref7) {\n  let {\n    ethAdapter,\n    safeVersion,\n    chainId,\n    customContracts\n  } = _ref7;\n  const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);\n  const createCallContract = await ethAdapter.getCreateCallContract({\n    safeVersion,\n    chainId,\n    singletonDeployment: createCallDeployment,\n    customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAddress,\n    customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAbi\n  });\n  const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());\n\n  if (!isContractDeployed) {\n    throw new Error('CreateCall contract is not deployed on the current network');\n  }\n\n  return createCallContract;\n}\n\nexports.getCreateCallContract = getCreateCallContract;","map":{"version":3,"sources":["../../../src/contracts/safeDeploymentContracts.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getCreateCallContract = exports.getSignMessageLibContract = exports.getMultiSendCallOnlyContract = exports.getMultiSendContract = exports.getCompatibilityFallbackHandlerContract = exports.getProxyFactoryContract = exports.getSafeContract = exports.getCreateCallContractDeployment = exports.getSignMessageLibContractDeployment = exports.getSafeProxyFactoryContractDeployment = exports.getMultiSendContractDeployment = exports.getMultiSendCallOnlyContractDeployment = exports.getCompatibilityFallbackHandlerContractDeployment = exports.getSafeContractDeployment = void 0;\nconst safe_deployments_1 = require(\"@gnosis.pm/safe-deployments\");\nconst config_1 = require(\"./config\");\nfunction getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy = false) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].safeMasterCopyVersion;\n    const filters = { version, network: chainId.toString(), released: true };\n    if (config_1.safeDeploymentsL1ChainIds.includes(chainId) || isL1SafeMasterCopy) {\n        return (0, safe_deployments_1.getSafeSingletonDeployment)(filters);\n    }\n    return (0, safe_deployments_1.getSafeL2SingletonDeployment)(filters);\n}\nexports.getSafeContractDeployment = getSafeContractDeployment;\nfunction getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].compatibilityFallbackHandler;\n    return (0, safe_deployments_1.getCompatibilityFallbackHandlerDeployment)({\n        version,\n        network: chainId.toString(),\n        released: true\n    });\n}\nexports.getCompatibilityFallbackHandlerContractDeployment = getCompatibilityFallbackHandlerContractDeployment;\nfunction getMultiSendCallOnlyContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].multiSendCallOnlyVersion;\n    return (0, safe_deployments_1.getMultiSendCallOnlyDeployment)({ version, network: chainId.toString(), released: true });\n}\nexports.getMultiSendCallOnlyContractDeployment = getMultiSendCallOnlyContractDeployment;\nfunction getMultiSendContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].multiSendVersion;\n    return (0, safe_deployments_1.getMultiSendDeployment)({ version, network: chainId.toString(), released: true });\n}\nexports.getMultiSendContractDeployment = getMultiSendContractDeployment;\nfunction getSafeProxyFactoryContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].safeProxyFactoryVersion;\n    return (0, safe_deployments_1.getProxyFactoryDeployment)({ version, network: chainId.toString(), released: true });\n}\nexports.getSafeProxyFactoryContractDeployment = getSafeProxyFactoryContractDeployment;\nfunction getSignMessageLibContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].signMessageLibVersion;\n    return (0, safe_deployments_1.getSignMessageLibDeployment)({ version, network: chainId.toString(), released: true });\n}\nexports.getSignMessageLibContractDeployment = getSignMessageLibContractDeployment;\nfunction getCreateCallContractDeployment(safeVersion, chainId) {\n    const version = config_1.safeDeploymentsVersions[safeVersion].createCallVersion;\n    return (0, safe_deployments_1.getCreateCallDeployment)({ version, network: chainId.toString(), released: true });\n}\nexports.getCreateCallContractDeployment = getCreateCallContractDeployment;\nasync function getSafeContract({ ethAdapter, safeVersion, chainId, customSafeAddress, isL1SafeMasterCopy, customContracts }) {\n    const singletonDeployment = getSafeContractDeployment(safeVersion, chainId, isL1SafeMasterCopy);\n    const gnosisSafeContract = ethAdapter.getSafeContract({\n        safeVersion,\n        chainId,\n        singletonDeployment,\n        customContractAddress: customSafeAddress !== null && customSafeAddress !== void 0 ? customSafeAddress : customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeMasterCopyAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(gnosisSafeContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('SafeProxy contract is not deployed on the current network');\n    }\n    return gnosisSafeContract;\n}\nexports.getSafeContract = getSafeContract;\nasync function getProxyFactoryContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const proxyFactoryDeployment = getSafeProxyFactoryContractDeployment(safeVersion, chainId);\n    const safeProxyFactoryContract = await ethAdapter.getSafeProxyFactoryContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: proxyFactoryDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.safeProxyFactoryAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(safeProxyFactoryContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('SafeProxyFactory contract is not deployed on the current network');\n    }\n    return safeProxyFactoryContract;\n}\nexports.getProxyFactoryContract = getProxyFactoryContract;\nasync function getCompatibilityFallbackHandlerContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const fallbackHandlerDeployment = getCompatibilityFallbackHandlerContractDeployment(safeVersion, chainId);\n    const fallbackHandlerContract = await ethAdapter.getCompatibilityFallbackHandlerContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: fallbackHandlerDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.fallbackHandlerAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(fallbackHandlerContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('CompatibilityFallbackHandler contract is not deployed on the current network');\n    }\n    return fallbackHandlerContract;\n}\nexports.getCompatibilityFallbackHandlerContract = getCompatibilityFallbackHandlerContract;\nasync function getMultiSendContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const multiSendDeployment = getMultiSendContractDeployment(safeVersion, chainId);\n    const multiSendContract = await ethAdapter.getMultiSendContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: multiSendDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(multiSendContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('MultiSend contract is not deployed on the current network');\n    }\n    return multiSendContract;\n}\nexports.getMultiSendContract = getMultiSendContract;\nasync function getMultiSendCallOnlyContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const multiSendCallOnlyDeployment = getMultiSendCallOnlyContractDeployment(safeVersion, chainId);\n    const multiSendCallOnlyContract = await ethAdapter.getMultiSendCallOnlyContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: multiSendCallOnlyDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.multiSendCallOnlyAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(multiSendCallOnlyContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('MultiSendCallOnly contract is not deployed on the current network');\n    }\n    return multiSendCallOnlyContract;\n}\nexports.getMultiSendCallOnlyContract = getMultiSendCallOnlyContract;\nasync function getSignMessageLibContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const signMessageLibDeployment = getSignMessageLibContractDeployment(safeVersion, chainId);\n    const signMessageLibContract = await ethAdapter.getSignMessageLibContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: signMessageLibDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.signMessageLibAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(signMessageLibContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('SignMessageLib contract is not deployed on the current network');\n    }\n    return signMessageLibContract;\n}\nexports.getSignMessageLibContract = getSignMessageLibContract;\nasync function getCreateCallContract({ ethAdapter, safeVersion, chainId, customContracts }) {\n    const createCallDeployment = getCreateCallContractDeployment(safeVersion, chainId);\n    const createCallContract = await ethAdapter.getCreateCallContract({\n        safeVersion,\n        chainId,\n        singletonDeployment: createCallDeployment,\n        customContractAddress: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAddress,\n        customContractAbi: customContracts === null || customContracts === void 0 ? void 0 : customContracts.createCallAbi\n    });\n    const isContractDeployed = await ethAdapter.isContractDeployed(createCallContract.getAddress());\n    if (!isContractDeployed) {\n        throw new Error('CreateCall contract is not deployed on the current network');\n    }\n    return createCallContract;\n}\nexports.getCreateCallContract = getCreateCallContract;\n//# sourceMappingURL=safeDeploymentContracts.js.map"]},"metadata":{},"sourceType":"script"}