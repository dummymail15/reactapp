{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar EthSafeTransaction = /*#__PURE__*/function () {\n  function EthSafeTransaction(data) {\n    _classCallCheck(this, EthSafeTransaction);\n\n    this.signatures = new Map();\n    this.data = data;\n  }\n\n  _createClass(EthSafeTransaction, [{\n    key: \"addSignature\",\n    value: function addSignature(signature) {\n      this.signatures.set(signature.signer.toLowerCase(), signature);\n    }\n  }, {\n    key: \"encodedSignatures\",\n    value: function encodedSignatures() {\n      var _this = this;\n\n      var signers = Array.from(this.signatures.keys()).sort();\n      var baseOffset = signers.length * 65;\n      var staticParts = '';\n      var dynamicParts = '';\n      signers.forEach(function (signerAddress) {\n        var signature = _this.signatures.get(signerAddress);\n\n        staticParts += signature === null || signature === void 0 ? void 0 : signature.staticPart().slice(2);\n        dynamicParts += signature === null || signature === void 0 ? void 0 : signature.dynamicPart();\n      });\n      return '0x' + staticParts + dynamicParts;\n    }\n  }]);\n\n  return EthSafeTransaction;\n}();\n\nexports.default = EthSafeTransaction;","map":{"version":3,"sources":["../../../../src/utils/transactions/SafeTransaction.ts"],"names":[],"mappings":";;;;;;;;;;IAMM,kB;AAIJ,8BAAY,IAAZ,EAAqC;AAAA;;AAFrC,SAAA,UAAA,GAAyC,IAAI,GAAJ,EAAzC;AAGE,SAAK,IAAL,GAAY,IAAZ;AACD;;;;WAED,sBAAa,SAAb,EAAqC;AACnC,WAAK,UAAL,CAAgB,GAAhB,CAAoB,SAAS,CAAC,MAAV,CAAiB,WAAjB,EAApB,EAAoD,SAApD;AACD;;;WAED,6BAAiB;AAAA;;AACf,UAAM,OAAO,GAAG,KAAK,CAAC,IAAN,CAAW,KAAK,UAAL,CAAgB,IAAhB,EAAX,EAAmC,IAAnC,EAAhB;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,MAAR,GAAiB,EAApC;AACA,UAAI,WAAW,GAAG,EAAlB;AACA,UAAI,YAAY,GAAG,EAAnB;AACA,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,aAAD,EAAkB;AAChC,YAAM,SAAS,GAAG,KAAI,CAAC,UAAL,CAAgB,GAAhB,CAAoB,aAApB,CAAlB;;AACA,QAAA,WAAW,IAAI,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,UAAX,GAAgE,KAAhE,CAAsE,CAAtE,CAAf;AACA,QAAA,YAAY,IAAI,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,WAAX,EAAhB;AACD,OAJD;AAKA,aAAO,OAAO,WAAP,GAAqB,YAA5B;AACD;;;;;;AAGH,OAAA,CAAA,OAAA,GAAe,kBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass EthSafeTransaction {\n    constructor(data) {\n        this.signatures = new Map();\n        this.data = data;\n    }\n    addSignature(signature) {\n        this.signatures.set(signature.signer.toLowerCase(), signature);\n    }\n    encodedSignatures() {\n        const signers = Array.from(this.signatures.keys()).sort();\n        const baseOffset = signers.length * 65;\n        let staticParts = '';\n        let dynamicParts = '';\n        signers.forEach((signerAddress) => {\n            const signature = this.signatures.get(signerAddress);\n            staticParts += signature === null || signature === void 0 ? void 0 : signature.staticPart( /*baseOffset + dynamicParts.length / 2*/).slice(2);\n            dynamicParts += signature === null || signature === void 0 ? void 0 : signature.dynamicPart();\n        });\n        return '0x' + staticParts + dynamicParts;\n    }\n}\nexports.default = EthSafeTransaction;\n//# sourceMappingURL=SafeTransaction.js.map"]},"metadata":{},"sourceType":"script"}