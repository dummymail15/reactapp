{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateTxGas = void 0;\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nconst safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\n\nfunction estimateDataGasCosts(data) {\n  const reducer = (accumulator, currentValue) => {\n    if (currentValue === '0x') {\n      return accumulator + 0;\n    }\n\n    if (currentValue === '00') {\n      return accumulator + 4;\n    }\n\n    return accumulator + 16;\n  };\n\n  return data.match(/.{2}/g).reduce(reducer, 0);\n}\n\nasync function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {\n  let txGasEstimation = 0;\n  const safeAddress = safeContract.getAddress();\n  const estimateData = safeContract.encode('requiredTxGas', [to, valueInWei, data, operation]);\n\n  try {\n    const estimateResponse = (await ethAdapter.estimateGas({\n      to: safeAddress,\n      from: safeAddress,\n      data: estimateData\n    })).toString();\n    txGasEstimation = bignumber_1.BigNumber.from('0x' + estimateResponse.substring(138)).toNumber() + 10000;\n  } catch (error) {}\n\n  if (txGasEstimation > 0) {\n    const dataGasEstimation = estimateDataGasCosts(estimateData);\n    let additionalGas = 10000;\n\n    for (let i = 0; i < 10; i++) {\n      try {\n        const estimateResponse = await ethAdapter.call({\n          to: safeAddress,\n          from: safeAddress,\n          data: estimateData,\n          gasPrice: 0,\n          gasLimit: txGasEstimation + dataGasEstimation + additionalGas\n        });\n\n        if (estimateResponse !== '0x') {\n          break;\n        }\n      } catch (error) {}\n\n      txGasEstimation += additionalGas;\n      additionalGas *= 2;\n    }\n\n    return txGasEstimation + additionalGas;\n  }\n\n  try {\n    const estimateGas = await ethAdapter.estimateGas({\n      to,\n      from: safeAddress,\n      value: valueInWei,\n      data\n    });\n    return estimateGas;\n  } catch (error) {\n    if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {\n      return 0;\n    }\n\n    return Promise.reject(error);\n  }\n}\n\nexports.estimateTxGas = estimateTxGas;","map":{"version":3,"sources":["../../../../src/utils/transactions/gas.ts"],"names":[],"mappings":";;;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AACA,MAAA,qBAAA,GAAA,OAAA,CAAA,kCAAA,CAAA;;AAEA,SAAS,oBAAT,CAA8B,IAA9B,EAA0C;AACxC,QAAM,OAAO,GAAG,CAAC,WAAD,EAAsB,YAAtB,KAA8C;AAC5D,QAAI,YAAY,KAAK,IAArB,EAA2B;AACzB,aAAO,WAAW,GAAG,CAArB;AACD;;AACD,QAAI,YAAY,KAAK,IAArB,EAA2B;AACzB,aAAO,WAAW,GAAG,CAArB;AACD;;AACD,WAAO,WAAW,GAAG,EAArB;AACD,GARD;;AASA,SAAQ,IAAI,CAAC,KAAL,CAAW,OAAX,EAAiC,MAAjC,CAAwC,OAAxC,EAAiD,CAAjD,CAAR;AACD;;AAEM,eAAe,aAAf,CACL,YADK,EAEL,UAFK,EAGL,EAHK,EAIL,UAJK,EAKL,IALK,EAML,SANK,EAMmB;AAExB,MAAI,eAAe,GAAG,CAAtB;AACA,QAAM,WAAW,GAAG,YAAY,CAAC,UAAb,EAApB;AAEA,QAAM,YAAY,GAAW,YAAY,CAAC,MAAb,CAAoB,eAApB,EAAqC,CAChE,EADgE,EAEhE,UAFgE,EAGhE,IAHgE,EAIhE,SAJgE,CAArC,CAA7B;;AAMA,MAAI;AACF,UAAM,gBAAgB,GAAG,CACvB,MAAM,UAAU,CAAC,WAAX,CAAuB;AAC3B,MAAA,EAAE,EAAE,WADuB;AAE3B,MAAA,IAAI,EAAE,WAFqB;AAG3B,MAAA,IAAI,EAAE;AAHqB,KAAvB,CADiB,EAMvB,QANuB,EAAzB;AAOA,IAAA,eAAe,GAAG,WAAA,CAAA,SAAA,CAAU,IAAV,CAAe,OAAO,gBAAgB,CAAC,SAAjB,CAA2B,GAA3B,CAAtB,EAAuD,QAAvD,KAAoE,KAAtF;AACD,GATD,CASE,OAAO,KAAP,EAAc,CAAE;;AAElB,MAAI,eAAe,GAAG,CAAtB,EAAyB;AACvB,UAAM,iBAAiB,GAAG,oBAAoB,CAAC,YAAD,CAA9C;AACA,QAAI,aAAa,GAAG,KAApB;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,EAApB,EAAwB,CAAC,EAAzB,EAA6B;AAC3B,UAAI;AACF,cAAM,gBAAgB,GAAG,MAAM,UAAU,CAAC,IAAX,CAAgB;AAC7C,UAAA,EAAE,EAAE,WADyC;AAE7C,UAAA,IAAI,EAAE,WAFuC;AAG7C,UAAA,IAAI,EAAE,YAHuC;AAI7C,UAAA,QAAQ,EAAE,CAJmC;AAK7C,UAAA,QAAQ,EAAE,eAAe,GAAG,iBAAlB,GAAsC;AALH,SAAhB,CAA/B;;AAOA,YAAI,gBAAgB,KAAK,IAAzB,EAA+B;AAC7B;AACD;AACF,OAXD,CAWE,OAAO,KAAP,EAAc,CAAE;;AAClB,MAAA,eAAe,IAAI,aAAnB;AACA,MAAA,aAAa,IAAI,CAAjB;AACD;;AACD,WAAO,eAAe,GAAG,aAAzB;AACD;;AAED,MAAI;AACF,UAAM,WAAW,GAAG,MAAM,UAAU,CAAC,WAAX,CAAuB;AAC/C,MAAA,EAD+C;AAE/C,MAAA,IAAI,EAAE,WAFyC;AAG/C,MAAA,KAAK,EAAE,UAHwC;AAI/C,MAAA;AAJ+C,KAAvB,CAA1B;AAMA,WAAO,WAAP;AACD,GARD,CAQE,OAAO,KAAP,EAAc;AACd,QAAI,SAAS,KAAK,qBAAA,CAAA,aAAA,CAAc,YAAhC,EAA8C;AAC5C,aAAO,CAAP;AACD;;AACD,WAAO,OAAO,CAAC,MAAR,CAAe,KAAf,CAAP;AACD;AACF;;AAhED,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.estimateTxGas = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\nfunction estimateDataGasCosts(data) {\n    const reducer = (accumulator, currentValue) => {\n        if (currentValue === '0x') {\n            return accumulator + 0;\n        }\n        if (currentValue === '00') {\n            return accumulator + 4;\n        }\n        return accumulator + 16;\n    };\n    return data.match(/.{2}/g).reduce(reducer, 0);\n}\nasync function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {\n    let txGasEstimation = 0;\n    const safeAddress = safeContract.getAddress();\n    const estimateData = safeContract.encode('requiredTxGas', [\n        to,\n        valueInWei,\n        data,\n        operation\n    ]);\n    try {\n        const estimateResponse = (await ethAdapter.estimateGas({\n            to: safeAddress,\n            from: safeAddress,\n            data: estimateData\n        })).toString();\n        txGasEstimation = bignumber_1.BigNumber.from('0x' + estimateResponse.substring(138)).toNumber() + 10000;\n    }\n    catch (error) { }\n    if (txGasEstimation > 0) {\n        const dataGasEstimation = estimateDataGasCosts(estimateData);\n        let additionalGas = 10000;\n        for (let i = 0; i < 10; i++) {\n            try {\n                const estimateResponse = await ethAdapter.call({\n                    to: safeAddress,\n                    from: safeAddress,\n                    data: estimateData,\n                    gasPrice: 0,\n                    gasLimit: txGasEstimation + dataGasEstimation + additionalGas\n                });\n                if (estimateResponse !== '0x') {\n                    break;\n                }\n            }\n            catch (error) { }\n            txGasEstimation += additionalGas;\n            additionalGas *= 2;\n        }\n        return txGasEstimation + additionalGas;\n    }\n    try {\n        const estimateGas = await ethAdapter.estimateGas({\n            to,\n            from: safeAddress,\n            value: valueInWei,\n            data\n        });\n        return estimateGas;\n    }\n    catch (error) {\n        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {\n            return 0;\n        }\n        return Promise.reject(error);\n    }\n}\nexports.estimateTxGas = estimateTxGas;\n//# sourceMappingURL=gas.js.map"]},"metadata":{},"sourceType":"script"}