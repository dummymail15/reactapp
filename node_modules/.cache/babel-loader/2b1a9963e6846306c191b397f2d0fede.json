{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _objectSpread = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../../utils\");\n\nvar GnosisSafeContractEthers = /*#__PURE__*/function () {\n  function GnosisSafeContractEthers(contract) {\n    var _this = this;\n\n    _classCallCheck(this, GnosisSafeContractEthers);\n\n    this.contract = contract;\n\n    this.encode = function (methodName, params) {\n      return _this.contract.interface.encodeFunctionData(methodName, params);\n    };\n  }\n\n  _createClass(GnosisSafeContractEthers, [{\n    key: \"getVersion\",\n    value: function () {\n      var _getVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.contract.VERSION();\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getVersion() {\n        return _getVersion.apply(this, arguments);\n      }\n\n      return getVersion;\n    }()\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return this.contract.address;\n    }\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.contract.nonce();\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent.toNumber());\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getNonce() {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n  }, {\n    key: \"getThreshold\",\n    value: function () {\n      var _getThreshold = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.contract.getThreshold();\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent.toNumber());\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getThreshold() {\n        return _getThreshold.apply(this, arguments);\n      }\n\n      return getThreshold;\n    }()\n  }, {\n    key: \"getOwners\",\n    value: function () {\n      var _getOwners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.contract.getOwners());\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getOwners() {\n        return _getOwners.apply(this, arguments);\n      }\n\n      return getOwners;\n    }()\n  }, {\n    key: \"isOwner\",\n    value: function () {\n      var _isOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(address) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", this.contract.isOwner(address));\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function isOwner(_x) {\n        return _isOwner.apply(this, arguments);\n      }\n\n      return isOwner;\n    }()\n  }, {\n    key: \"getTransactionHash\",\n    value: function () {\n      var _getTransactionHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(safeTransactionData) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getTransactionHash(_x2) {\n        return _getTransactionHash.apply(this, arguments);\n      }\n\n      return getTransactionHash;\n    }()\n  }, {\n    key: \"approvedHashes\",\n    value: function () {\n      var _approvedHashes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(ownerAddress, hash) {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", this.contract.approvedHashes(ownerAddress, hash));\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function approvedHashes(_x3, _x4) {\n        return _approvedHashes.apply(this, arguments);\n      }\n\n      return approvedHashes;\n    }()\n  }, {\n    key: \"approveHash\",\n    value: function () {\n      var _approveHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(hash, options) {\n        var txResponse;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (!(options && !options.gasLimit)) {\n                  _context8.next = 4;\n                  break;\n                }\n\n                _context8.next = 3;\n                return this.estimateGas('approveHash', [hash], _objectSpread({}, options));\n\n              case 3:\n                options.gasLimit = _context8.sent;\n\n              case 4:\n                _context8.next = 6;\n                return this.contract.approveHash(hash, options);\n\n              case 6:\n                txResponse = _context8.sent;\n                return _context8.abrupt(\"return\", (0, utils_1.toTxResult)(txResponse, options));\n\n              case 8:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function approveHash(_x5, _x6) {\n        return _approveHash.apply(this, arguments);\n      }\n\n      return approveHash;\n    }()\n  }, {\n    key: \"isValidTransaction\",\n    value: function () {\n      var _isValidTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(safeTransaction, options) {\n        var isTxValid;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                isTxValid = false;\n                _context9.prev = 1;\n\n                if (!(options && !options.gasLimit)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                _context9.next = 5;\n                return this.estimateGas('execTransaction', [safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()], _objectSpread({}, options));\n\n              case 5:\n                options.gasLimit = _context9.sent;\n\n              case 6:\n                _context9.next = 8;\n                return this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n\n              case 8:\n                isTxValid = _context9.sent;\n                _context9.next = 13;\n                break;\n\n              case 11:\n                _context9.prev = 11;\n                _context9.t0 = _context9[\"catch\"](1);\n\n              case 13:\n                return _context9.abrupt(\"return\", isTxValid);\n\n              case 14:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[1, 11]]);\n      }));\n\n      function isValidTransaction(_x7, _x8) {\n        return _isValidTransaction.apply(this, arguments);\n      }\n\n      return isValidTransaction;\n    }()\n  }, {\n    key: \"execTransaction\",\n    value: function () {\n      var _execTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(safeTransaction, options) {\n        var txResponse;\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                if (!(options && !options.gasLimit)) {\n                  _context10.next = 4;\n                  break;\n                }\n\n                _context10.next = 3;\n                return this.estimateGas('execTransaction', [safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()], _objectSpread({}, options));\n\n              case 3:\n                options.gasLimit = _context10.sent;\n\n              case 4:\n                _context10.next = 6;\n                return this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n\n              case 6:\n                txResponse = _context10.sent;\n                return _context10.abrupt(\"return\", (0, utils_1.toTxResult)(txResponse, options));\n\n              case 8:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function execTransaction(_x9, _x10) {\n        return _execTransaction.apply(this, arguments);\n      }\n\n      return execTransaction;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(methodName, params, options) {\n        var _this$contract$estima;\n\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return (_this$contract$estima = this.contract.estimateGas)[methodName].apply(_this$contract$estima, _toConsumableArray(params).concat([options]));\n\n              case 2:\n                return _context11.abrupt(\"return\", _context11.sent.toNumber());\n\n              case 3:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function estimateGas(_x11, _x12, _x13) {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }()\n  }]);\n\n  return GnosisSafeContractEthers;\n}();\n\nexports.default = GnosisSafeContractEthers;","map":{"version":3,"sources":["../../../../src/contracts/GnosisSafe/GnosisSafeContractEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../../utils\");\nclass GnosisSafeContractEthers {\n    constructor(contract) {\n        this.contract = contract;\n        this.encode = (methodName, params) => {\n            return this.contract.interface.encodeFunctionData(methodName, params);\n        };\n    }\n    async getVersion() {\n        return (await this.contract.VERSION());\n    }\n    getAddress() {\n        return this.contract.address;\n    }\n    async getNonce() {\n        return (await this.contract.nonce()).toNumber();\n    }\n    async getThreshold() {\n        return (await this.contract.getThreshold()).toNumber();\n    }\n    async getOwners() {\n        return this.contract.getOwners();\n    }\n    async isOwner(address) {\n        return this.contract.isOwner(address);\n    }\n    async getTransactionHash(safeTransactionData) {\n        return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);\n    }\n    async approvedHashes(ownerAddress, hash) {\n        return this.contract.approvedHashes(ownerAddress, hash);\n    }\n    async approveHash(hash, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('approveHash', [hash], { ...options });\n        }\n        const txResponse = await this.contract.approveHash(hash, options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async isValidTransaction(safeTransaction, options) {\n        let isTxValid = false;\n        try {\n            if (options && !options.gasLimit) {\n                options.gasLimit = await this.estimateGas('execTransaction', [\n                    safeTransaction.data.to,\n                    safeTransaction.data.value,\n                    safeTransaction.data.data,\n                    safeTransaction.data.operation,\n                    safeTransaction.data.safeTxGas,\n                    safeTransaction.data.baseGas,\n                    safeTransaction.data.gasPrice,\n                    safeTransaction.data.gasToken,\n                    safeTransaction.data.refundReceiver,\n                    safeTransaction.encodedSignatures()\n                ], {\n                    ...options\n                });\n            }\n            isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n        }\n        catch { }\n        return isTxValid;\n    }\n    async execTransaction(safeTransaction, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('execTransaction', [\n                safeTransaction.data.to,\n                safeTransaction.data.value,\n                safeTransaction.data.data,\n                safeTransaction.data.operation,\n                safeTransaction.data.safeTxGas,\n                safeTransaction.data.baseGas,\n                safeTransaction.data.gasPrice,\n                safeTransaction.data.gasToken,\n                safeTransaction.data.refundReceiver,\n                safeTransaction.encodedSignatures()\n            ], {\n                ...options\n            });\n        }\n        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async estimateGas(methodName, params, options) {\n        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n    }\n}\nexports.default = GnosisSafeContractEthers;\n//# sourceMappingURL=GnosisSafeContractEthers.js.map"]},"metadata":{},"sourceType":"script"}