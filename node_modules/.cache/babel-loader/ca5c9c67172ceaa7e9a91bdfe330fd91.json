{"ast":null,"code":"\"use strict\";\n\nvar _createForOfIteratorHelper = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper\");\n\nvar _objectSpread = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _regeneratorRuntime = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar _Safe_ethAdapter, _Safe_contractManager, _Safe_ownerManager, _Safe_moduleManager, _Safe_guardManager, _Safe_fallbackHandlerManager;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\n\nvar contractManager_1 = __importDefault(require(\"./managers/contractManager\"));\n\nvar fallbackHandlerManager_1 = __importDefault(require(\"./managers/fallbackHandlerManager\"));\n\nvar guardManager_1 = __importDefault(require(\"./managers/guardManager\"));\n\nvar moduleManager_1 = __importDefault(require(\"./managers/moduleManager\"));\n\nvar ownerManager_1 = __importDefault(require(\"./managers/ownerManager\"));\n\nvar utils_1 = require(\"./utils\");\n\nvar signatures_1 = require(\"./utils/signatures\");\n\nvar SafeSignature_1 = __importDefault(require(\"./utils/signatures/SafeSignature\"));\n\nvar SafeTransaction_1 = __importDefault(require(\"./utils/transactions/SafeTransaction\"));\n\nvar utils_2 = require(\"./utils/transactions/utils\");\n\nvar Safe = /*#__PURE__*/function () {\n  function Safe() {\n    _classCallCheck(this, Safe);\n\n    _Safe_ethAdapter.set(this, void 0);\n\n    _Safe_contractManager.set(this, void 0);\n\n    _Safe_ownerManager.set(this, void 0);\n\n    _Safe_moduleManager.set(this, void 0);\n\n    _Safe_guardManager.set(this, void 0);\n\n    _Safe_fallbackHandlerManager.set(this, void 0);\n  }\n  /**\n   * Creates an instance of the Safe Core SDK.\n   * @param config - Ethers Safe configuration\n   * @returns The Safe Core SDK instance\n   * @throws \"SafeProxy contract is not deployed on the current network\"\n   * @throws \"MultiSend contract is not deployed on the current network\"\n   * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n   */\n\n\n  _createClass(Safe, [{\n    key: \"init\",\n    value:\n    /**\n     * Initializes the Safe Core SDK instance.\n     * @param config - Safe configuration\n     * @throws \"Signer must be connected to a provider\"\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */\n    function () {\n      var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n        var ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                ethAdapter = _ref.ethAdapter, safeAddress = _ref.safeAddress, isL1SafeMasterCopy = _ref.isL1SafeMasterCopy, contractNetworks = _ref.contractNetworks;\n\n                __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, \"f\");\n\n                _context.t0 = __classPrivateFieldSet;\n                _context.t1 = this;\n                _context.t2 = _Safe_contractManager;\n                _context.next = 7;\n                return contractManager_1.default.create({\n                  ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n                  safeAddress: safeAddress,\n                  isL1SafeMasterCopy: isL1SafeMasterCopy,\n                  contractNetworks: contractNetworks\n                });\n\n              case 7:\n                _context.t3 = _context.sent;\n                (0, _context.t0)(_context.t1, _context.t2, _context.t3, \"f\");\n\n                __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n\n                __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n\n                __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n\n                __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init(_x) {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }()\n    /**\n     * Returns a new instance of the Safe Core SDK.\n     * @param config - Connect Safe configuration\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */\n\n  }, {\n    key: \"connect\",\n    value: function () {\n      var _connect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n        var ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                ethAdapter = _ref2.ethAdapter, safeAddress = _ref2.safeAddress, isL1SafeMasterCopy = _ref2.isL1SafeMasterCopy, contractNetworks = _ref2.contractNetworks;\n                _context2.next = 3;\n                return Safe.create({\n                  ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n                  safeAddress: safeAddress || this.getAddress(),\n                  isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").isL1SafeMasterCopy,\n                  contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").contractNetworks\n                });\n\n              case 3:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function connect(_x2) {\n        return _connect.apply(this, arguments);\n      }\n\n      return connect;\n    }()\n    /**\n     * Returns the address of the current SafeProxy contract.\n     *\n     * @returns The address of the SafeProxy contract\n     */\n\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getAddress();\n    }\n    /**\n     * Returns the ContractManager\n     *\n     * @returns The current ContractManager\n     * */\n\n  }, {\n    key: \"getContractManager\",\n    value: function getContractManager() {\n      return __classPrivateFieldGet(this, _Safe_contractManager, \"f\");\n    }\n    /**\n     * Returns the current EthAdapter.\n     *\n     * @returns The current EthAdapter\n     */\n\n  }, {\n    key: \"getEthAdapter\",\n    value: function getEthAdapter() {\n      return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\");\n    }\n    /**\n     * Returns the address of the MultiSend contract.\n     *\n     * @returns The address of the MultiSend contract\n     */\n\n  }, {\n    key: \"getMultiSendAddress\",\n    value: function getMultiSendAddress() {\n      return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract.getAddress();\n    }\n    /**\n     * Returns the address of the MultiSendCallOnly contract.\n     *\n     * @returns The address of the MultiSendCallOnly contract\n     */\n\n  }, {\n    key: \"getMultiSendCallOnlyAddress\",\n    value: function getMultiSendCallOnlyAddress() {\n      return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract.getAddress();\n    }\n    /**\n     * Returns the Safe Master Copy contract version.\n     *\n     * @returns The Safe Master Copy contract version\n     */\n\n  }, {\n    key: \"getContractVersion\",\n    value: function () {\n      var _getContractVersion = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getVersion());\n\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function getContractVersion() {\n        return _getContractVersion.apply(this, arguments);\n      }\n\n      return getContractVersion;\n    }()\n    /**\n     * Returns the list of Safe owner accounts.\n     *\n     * @returns The list of owners\n     */\n\n  }, {\n    key: \"getOwners\",\n    value: function () {\n      var _getOwners = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getOwners());\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function getOwners() {\n        return _getOwners.apply(this, arguments);\n      }\n\n      return getOwners;\n    }()\n    /**\n     * Returns the Safe nonce.\n     *\n     * @returns The Safe nonce\n     */\n\n  }, {\n    key: \"getNonce\",\n    value: function () {\n      var _getNonce = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getNonce());\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getNonce() {\n        return _getNonce.apply(this, arguments);\n      }\n\n      return getNonce;\n    }()\n    /**\n     * Returns the Safe threshold.\n     *\n     * @returns The Safe threshold\n     */\n\n  }, {\n    key: \"getThreshold\",\n    value: function () {\n      var _getThreshold = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getThreshold());\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function getThreshold() {\n        return _getThreshold.apply(this, arguments);\n      }\n\n      return getThreshold;\n    }()\n    /**\n     * Returns the chainId of the connected network.\n     *\n     * @returns The chainId of the connected network\n     */\n\n  }, {\n    key: \"getChainId\",\n    value: function () {\n      var _getChainId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getChainId());\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getChainId() {\n        return _getChainId.apply(this, arguments);\n      }\n\n      return getChainId;\n    }()\n    /**\n     * Returns the ETH balance of the Safe.\n     *\n     * @returns The ETH balance of the Safe\n     */\n\n  }, {\n    key: \"getBalance\",\n    value: function () {\n      var _getBalance = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                return _context8.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getBalance(this.getAddress()));\n\n              case 1:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getBalance() {\n        return _getBalance.apply(this, arguments);\n      }\n\n      return getBalance;\n    }()\n    /**\n     * Returns the address of the FallbackHandler contract.\n     *\n     * @returns The address of the FallbackHandler contract\n     */\n\n  }, {\n    key: \"getFallbackHandler\",\n    value: function getFallbackHandler() {\n      return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").getFallbackHandler();\n    }\n    /**\n     * Returns the enabled Safe guard or 0x address if no guards are enabled.\n     *\n     * @returns The address of the enabled Safe guard\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n\n  }, {\n    key: \"getGuard\",\n    value: function () {\n      var _getGuard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                return _context9.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_guardManager, \"f\").getGuard());\n\n              case 1:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getGuard() {\n        return _getGuard.apply(this, arguments);\n      }\n\n      return getGuard;\n    }()\n    /**\n     * Returns the list of addresses of all the enabled Safe modules.\n     *\n     * @returns The list of addresses of all the enabled Safe modules\n     */\n\n  }, {\n    key: \"getModules\",\n    value: function () {\n      var _getModules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                return _context10.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").getModules());\n\n              case 1:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getModules() {\n        return _getModules.apply(this, arguments);\n      }\n\n      return getModules;\n    }()\n    /**\n     * Checks if a specific Safe module is enabled for the current Safe.\n     *\n     * @param moduleAddress - The desired module address\n     * @returns TRUE if the module is enabled\n     */\n\n  }, {\n    key: \"isModuleEnabled\",\n    value: function () {\n      var _isModuleEnabled = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11(moduleAddress) {\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                return _context11.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").isModuleEnabled(moduleAddress));\n\n              case 1:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function isModuleEnabled(_x3) {\n        return _isModuleEnabled.apply(this, arguments);\n      }\n\n      return isModuleEnabled;\n    }()\n    /**\n     * Checks if a specific address is an owner of the current Safe.\n     *\n     * @param ownerAddress - The account address\n     * @returns TRUE if the account is an owner\n     */\n\n  }, {\n    key: \"isOwner\",\n    value: function () {\n      var _isOwner = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12(ownerAddress) {\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                return _context12.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").isOwner(ownerAddress));\n\n              case 1:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function isOwner(_x4) {\n        return _isOwner.apply(this, arguments);\n      }\n\n      return isOwner;\n    }()\n    /**\n     * Returns a Safe transaction ready to be signed by the owners.\n     *\n     * @param createTransactionProps - The createTransaction props\n     * @returns The Safe transaction\n     * @throws \"Invalid empty array of transactions\"\n     */\n\n  }, {\n    key: \"createTransaction\",\n    value: function () {\n      var _createTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13(_ref3) {\n        var safeTransactionData, _ref3$onlyCalls, onlyCalls, options, newTransaction, multiSendContract, multiSendData, multiSendTransaction, standardizedTransaction;\n\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                safeTransactionData = _ref3.safeTransactionData, _ref3$onlyCalls = _ref3.onlyCalls, onlyCalls = _ref3$onlyCalls === void 0 ? false : _ref3$onlyCalls, options = _ref3.options;\n\n                if (!((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0)) {\n                  _context13.next = 3;\n                  break;\n                }\n\n                throw new Error('Invalid empty array of transactions');\n\n              case 3:\n                if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {\n                  multiSendContract = onlyCalls ? __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract : __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract;\n                  multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));\n                  multiSendTransaction = _objectSpread(_objectSpread({}, options), {}, {\n                    to: multiSendContract.getAddress(),\n                    value: '0',\n                    data: multiSendContract.encode('multiSend', [multiSendData]),\n                    operation: safe_core_sdk_types_1.OperationType.DelegateCall\n                  });\n                  newTransaction = multiSendTransaction;\n                } else {\n                  newTransaction = (0, utils_1.isMetaTransactionArray)(safeTransactionData) ? _objectSpread(_objectSpread({}, options), safeTransactionData[0]) : safeTransactionData;\n                }\n\n                _context13.next = 6;\n                return (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), newTransaction);\n\n              case 6:\n                standardizedTransaction = _context13.sent;\n                return _context13.abrupt(\"return\", new SafeTransaction_1.default(standardizedTransaction));\n\n              case 8:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function createTransaction(_x5) {\n        return _createTransaction.apply(this, arguments);\n      }\n\n      return createTransaction;\n    }()\n    /**\n     * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.\n     *\n     * @param nonce - The nonce of the transaction/s that are going to be rejected\n     * @returns The Safe transaction that invalidates the pending Safe transaction/s\n     */\n\n  }, {\n    key: \"createRejectionTransaction\",\n    value: function () {\n      var _createRejectionTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14(nonce) {\n        var safeTransactionData;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                safeTransactionData = {\n                  to: this.getAddress(),\n                  nonce: nonce,\n                  value: '0',\n                  data: '0x',\n                  safeTxGas: 0\n                };\n                return _context14.abrupt(\"return\", this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                }));\n\n              case 2:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function createRejectionTransaction(_x6) {\n        return _createRejectionTransaction.apply(this, arguments);\n      }\n\n      return createRejectionTransaction;\n    }()\n    /**\n     * Copies a Safe transaction\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The new Safe transaction\n     */\n\n  }, {\n    key: \"copyTransaction\",\n    value: function () {\n      var _copyTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(safeTransaction) {\n        var signedSafeTransaction;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.next = 2;\n                return this.createTransaction({\n                  safeTransactionData: safeTransaction.data\n                });\n\n              case 2:\n                signedSafeTransaction = _context15.sent;\n                safeTransaction.signatures.forEach(function (signature) {\n                  signedSafeTransaction.addSignature(signature);\n                });\n                return _context15.abrupt(\"return\", signedSafeTransaction);\n\n              case 5:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function copyTransaction(_x7) {\n        return _copyTransaction.apply(this, arguments);\n      }\n\n      return copyTransaction;\n    }()\n    /**\n     * Returns the transaction hash of a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The transaction hash of the Safe transaction\n     */\n\n  }, {\n    key: \"getTransactionHash\",\n    value: function () {\n      var _getTransactionHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(safeTransaction) {\n        var safeTransactionData, txHash;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                safeTransactionData = safeTransaction.data;\n                _context16.next = 3;\n                return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getTransactionHash(safeTransactionData);\n\n              case 3:\n                txHash = _context16.sent;\n                return _context16.abrupt(\"return\", txHash);\n\n              case 5:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function getTransactionHash(_x8) {\n        return _getTransactionHash.apply(this, arguments);\n      }\n\n      return getTransactionHash;\n    }()\n    /**\n     * Signs a hash using the current signer account.\n     *\n     * @param hash - The hash to sign\n     * @returns The Safe signature\n     */\n\n  }, {\n    key: \"signTransactionHash\",\n    value: function () {\n      var _signTransactionHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(hash) {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                return _context17.abrupt(\"return\", (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), hash));\n\n              case 1:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function signTransactionHash(_x9) {\n        return _signTransactionHash.apply(this, arguments);\n      }\n\n      return signTransactionHash;\n    }()\n    /**\n     * Signs a transaction according to the EIP-712 using the current signer account.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param methodVersion - EIP-712 version. Optional\n     * @returns The Safe signature\n     */\n\n  }, {\n    key: \"signTypedData\",\n    value: function () {\n      var _signTypedData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(safeTransaction, methodVersion) {\n        var safeTransactionEIP712Args;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.t0 = this.getAddress();\n                _context18.next = 3;\n                return this.getContractVersion();\n\n              case 3:\n                _context18.t1 = _context18.sent;\n                _context18.next = 6;\n                return this.getEthAdapter().getChainId();\n\n              case 6:\n                _context18.t2 = _context18.sent;\n                _context18.t3 = safeTransaction.data;\n                safeTransactionEIP712Args = {\n                  safeAddress: _context18.t0,\n                  safeVersion: _context18.t1,\n                  chainId: _context18.t2,\n                  safeTransactionData: _context18.t3\n                };\n                return _context18.abrupt(\"return\", (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), safeTransactionEIP712Args, methodVersion));\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function signTypedData(_x10, _x11) {\n        return _signTypedData.apply(this, arguments);\n      }\n\n      return signTypedData;\n    }()\n    /**\n     * Adds the signature of the current signer to the Safe transaction object.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param signingMethod - Method followed to sign a transaction. Optional. Default value is \"eth_sign\"\n     * @returns The signed Safe transaction\n     * @throws \"Transactions can only be signed by Safe owners\"\n     */\n\n  }, {\n    key: \"signTransaction\",\n    value: function () {\n      var _signTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19(safeTransaction) {\n        var signingMethod,\n            transaction,\n            owners,\n            signerAddress,\n            addressIsOwner,\n            signature,\n            txHash,\n            signedSafeTransaction,\n            _args19 = arguments;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                signingMethod = _args19.length > 1 && _args19[1] !== undefined ? _args19[1] : 'eth_sign';\n\n                if (!(0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)) {\n                  _context19.next = 7;\n                  break;\n                }\n\n                _context19.next = 4;\n                return this.toSafeTransactionType(safeTransaction);\n\n              case 4:\n                _context19.t0 = _context19.sent;\n                _context19.next = 8;\n                break;\n\n              case 7:\n                _context19.t0 = safeTransaction;\n\n              case 8:\n                transaction = _context19.t0;\n                _context19.next = 11;\n                return this.getOwners();\n\n              case 11:\n                owners = _context19.sent;\n                _context19.next = 14;\n                return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n\n              case 14:\n                signerAddress = _context19.sent;\n\n                if (signerAddress) {\n                  _context19.next = 17;\n                  break;\n                }\n\n                throw new Error('EthAdapter must be initialized with a signer to use this method');\n\n              case 17:\n                addressIsOwner = owners.find(function (owner) {\n                  return signerAddress && (0, utils_1.sameString)(owner, signerAddress);\n                });\n\n                if (addressIsOwner) {\n                  _context19.next = 20;\n                  break;\n                }\n\n                throw new Error('Transactions can only be signed by Safe owners');\n\n              case 20:\n                if (!(signingMethod === 'eth_signTypedData')) {\n                  _context19.next = 26;\n                  break;\n                }\n\n                _context19.next = 23;\n                return this.signTypedData(transaction);\n\n              case 23:\n                signature = _context19.sent;\n                _context19.next = 32;\n                break;\n\n              case 26:\n                _context19.next = 28;\n                return this.getTransactionHash(transaction);\n\n              case 28:\n                txHash = _context19.sent;\n                _context19.next = 31;\n                return this.signTransactionHash(txHash);\n\n              case 31:\n                signature = _context19.sent;\n\n              case 32:\n                _context19.next = 34;\n                return this.createTransaction({\n                  safeTransactionData: transaction.data\n                });\n\n              case 34:\n                signedSafeTransaction = _context19.sent;\n                transaction.signatures.forEach(function (signature) {\n                  signedSafeTransaction.addSignature(signature);\n                });\n                signedSafeTransaction.addSignature(signature);\n                return _context19.abrupt(\"return\", signedSafeTransaction);\n\n              case 38:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n\n      function signTransaction(_x12) {\n        return _signTransaction.apply(this, arguments);\n      }\n\n      return signTransaction;\n    }()\n    /**\n     * Approves on-chain a hash using the current signer account.\n     *\n     * @param hash - The hash to approve\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"Transaction hashes can only be approved by Safe owners\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */\n\n  }, {\n    key: \"approveTransactionHash\",\n    value: function () {\n      var _approveTransactionHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20(hash, options) {\n        var owners, signerAddress, addressIsOwner;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.next = 2;\n                return this.getOwners();\n\n              case 2:\n                owners = _context20.sent;\n                _context20.next = 5;\n                return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n\n              case 5:\n                signerAddress = _context20.sent;\n\n                if (signerAddress) {\n                  _context20.next = 8;\n                  break;\n                }\n\n                throw new Error('EthAdapter must be initialized with a signer to use this method');\n\n              case 8:\n                addressIsOwner = owners.find(function (owner) {\n                  return signerAddress && (0, utils_1.sameString)(owner, signerAddress);\n                });\n\n                if (addressIsOwner) {\n                  _context20.next = 11;\n                  break;\n                }\n\n                throw new Error('Transaction hashes can only be approved by Safe owners');\n\n              case 11:\n                if (!((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit))) {\n                  _context20.next = 13;\n                  break;\n                }\n\n                throw new Error('Cannot specify gas and gasLimit together in transaction options');\n\n              case 13:\n                return _context20.abrupt(\"return\", __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approveHash(hash, _objectSpread({\n                  from: signerAddress\n                }, options)));\n\n              case 14:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n\n      function approveTransactionHash(_x13, _x14) {\n        return _approveTransactionHash.apply(this, arguments);\n      }\n\n      return approveTransactionHash;\n    }()\n    /**\n     * Returns a list of owners who have approved a specific Safe transaction.\n     *\n     * @param txHash - The Safe transaction hash\n     * @returns The list of owners\n     */\n\n  }, {\n    key: \"getOwnersWhoApprovedTx\",\n    value: function () {\n      var _getOwnersWhoApprovedTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21(txHash) {\n        var owners, ownersWhoApproved, _iterator, _step, owner, approved;\n\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.getOwners();\n\n              case 2:\n                owners = _context21.sent;\n                ownersWhoApproved = [];\n                _iterator = _createForOfIteratorHelper(owners);\n                _context21.prev = 5;\n\n                _iterator.s();\n\n              case 7:\n                if ((_step = _iterator.n()).done) {\n                  _context21.next = 15;\n                  break;\n                }\n\n                owner = _step.value;\n                _context21.next = 11;\n                return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approvedHashes(owner, txHash);\n\n              case 11:\n                approved = _context21.sent;\n\n                if (approved.gt(0)) {\n                  ownersWhoApproved.push(owner);\n                }\n\n              case 13:\n                _context21.next = 7;\n                break;\n\n              case 15:\n                _context21.next = 20;\n                break;\n\n              case 17:\n                _context21.prev = 17;\n                _context21.t0 = _context21[\"catch\"](5);\n\n                _iterator.e(_context21.t0);\n\n              case 20:\n                _context21.prev = 20;\n\n                _iterator.f();\n\n                return _context21.finish(20);\n\n              case 23:\n                return _context21.abrupt(\"return\", ownersWhoApproved);\n\n              case 24:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[5, 17, 20, 23]]);\n      }));\n\n      function getOwnersWhoApprovedTx(_x15) {\n        return _getOwnersWhoApprovedTx.apply(this, arguments);\n      }\n\n      return getOwnersWhoApprovedTx;\n    }()\n    /**\n     * Returns the Safe transaction to enable the fallback handler.\n     *\n     * @param address - The new fallback handler address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid fallback handler address provided\"\n     * @throws \"Fallback handler provided is already enabled\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */\n\n  }, {\n    key: \"createEnableFallbackHandlerTx\",\n    value: function () {\n      var _createEnableFallbackHandlerTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22(fallbackHandlerAddress, options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.t0 = _objectSpread;\n                _context22.t1 = this.getAddress();\n                _context22.next = 4;\n                return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeEnableFallbackHandlerData(fallbackHandlerAddress);\n\n              case 4:\n                _context22.t2 = _context22.sent;\n                _context22.t3 = {\n                  to: _context22.t1,\n                  value: '0',\n                  data: _context22.t2\n                };\n                _context22.t4 = options;\n                safeTransactionData = (0, _context22.t0)(_context22.t3, _context22.t4);\n                _context22.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context22.sent;\n                return _context22.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n\n      function createEnableFallbackHandlerTx(_x16, _x17) {\n        return _createEnableFallbackHandlerTx.apply(this, arguments);\n      }\n\n      return createEnableFallbackHandlerTx;\n    }()\n    /**\n     * Returns the Safe transaction to disable the fallback handler.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no fallback handler enabled yet\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */\n\n  }, {\n    key: \"createDisableFallbackHandlerTx\",\n    value: function () {\n      var _createDisableFallbackHandlerTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23(options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                _context23.t0 = _objectSpread;\n                _context23.t1 = this.getAddress();\n                _context23.next = 4;\n                return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeDisableFallbackHandlerData();\n\n              case 4:\n                _context23.t2 = _context23.sent;\n                _context23.t3 = {\n                  to: _context23.t1,\n                  value: '0',\n                  data: _context23.t2\n                };\n                _context23.t4 = options;\n                safeTransactionData = (0, _context23.t0)(_context23.t3, _context23.t4);\n                _context23.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context23.sent;\n                return _context23.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this);\n      }));\n\n      function createDisableFallbackHandlerTx(_x18) {\n        return _createDisableFallbackHandlerTx.apply(this, arguments);\n      }\n\n      return createDisableFallbackHandlerTx;\n    }()\n    /**\n     * Returns the Safe transaction to enable a Safe guard.\n     *\n     * @param guardAddress - The desired guard address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid guard address provided\"\n     * @throws \"Guard provided is already enabled\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n\n  }, {\n    key: \"createEnableGuardTx\",\n    value: function () {\n      var _createEnableGuardTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24(guardAddress, options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.t0 = _objectSpread;\n                _context24.t1 = this.getAddress();\n                _context24.next = 4;\n                return __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeEnableGuardData(guardAddress);\n\n              case 4:\n                _context24.t2 = _context24.sent;\n                _context24.t3 = {\n                  to: _context24.t1,\n                  value: '0',\n                  data: _context24.t2\n                };\n                _context24.t4 = options;\n                safeTransactionData = (0, _context24.t0)(_context24.t3, _context24.t4);\n                _context24.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context24.sent;\n                return _context24.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n\n      function createEnableGuardTx(_x19, _x20) {\n        return _createEnableGuardTx.apply(this, arguments);\n      }\n\n      return createEnableGuardTx;\n    }()\n    /**\n     * Returns the Safe transaction to disable a Safe guard.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no guard enabled yet\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n\n  }, {\n    key: \"createDisableGuardTx\",\n    value: function () {\n      var _createDisableGuardTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25(options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.t0 = _objectSpread;\n                _context25.t1 = this.getAddress();\n                _context25.next = 4;\n                return __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeDisableGuardData();\n\n              case 4:\n                _context25.t2 = _context25.sent;\n                _context25.t3 = {\n                  to: _context25.t1,\n                  value: '0',\n                  data: _context25.t2\n                };\n                _context25.t4 = options;\n                safeTransactionData = (0, _context25.t0)(_context25.t3, _context25.t4);\n                _context25.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context25.sent;\n                return _context25.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n\n      function createDisableGuardTx(_x21) {\n        return _createDisableGuardTx.apply(this, arguments);\n      }\n\n      return createDisableGuardTx;\n    }()\n    /**\n     * Returns the Safe transaction to enable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is already enabled\"\n     */\n\n  }, {\n    key: \"createEnableModuleTx\",\n    value: function () {\n      var _createEnableModuleTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26(moduleAddress, options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n          while (1) {\n            switch (_context26.prev = _context26.next) {\n              case 0:\n                _context26.t0 = _objectSpread;\n                _context26.t1 = this.getAddress();\n                _context26.next = 4;\n                return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeEnableModuleData(moduleAddress);\n\n              case 4:\n                _context26.t2 = _context26.sent;\n                _context26.t3 = {\n                  to: _context26.t1,\n                  value: '0',\n                  data: _context26.t2\n                };\n                _context26.t4 = options;\n                safeTransactionData = (0, _context26.t0)(_context26.t3, _context26.t4);\n                _context26.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context26.sent;\n                return _context26.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context26.stop();\n            }\n          }\n        }, _callee26, this);\n      }));\n\n      function createEnableModuleTx(_x22, _x23) {\n        return _createEnableModuleTx.apply(this, arguments);\n      }\n\n      return createEnableModuleTx;\n    }()\n    /**\n     * Returns the Safe transaction to disable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is not enabled already\"\n     */\n\n  }, {\n    key: \"createDisableModuleTx\",\n    value: function () {\n      var _createDisableModuleTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27(moduleAddress, options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n          while (1) {\n            switch (_context27.prev = _context27.next) {\n              case 0:\n                _context27.t0 = _objectSpread;\n                _context27.t1 = this.getAddress();\n                _context27.next = 4;\n                return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeDisableModuleData(moduleAddress);\n\n              case 4:\n                _context27.t2 = _context27.sent;\n                _context27.t3 = {\n                  to: _context27.t1,\n                  value: '0',\n                  data: _context27.t2\n                };\n                _context27.t4 = options;\n                safeTransactionData = (0, _context27.t0)(_context27.t3, _context27.t4);\n                _context27.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context27.sent;\n                return _context27.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context27.stop();\n            }\n          }\n        }, _callee27, this);\n      }));\n\n      function createDisableModuleTx(_x24, _x25) {\n        return _createDisableModuleTx.apply(this, arguments);\n      }\n\n      return createDisableModuleTx;\n    }()\n    /**\n     * Returns the Safe transaction to add an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is already an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n\n  }, {\n    key: \"createAddOwnerTx\",\n    value: function () {\n      var _createAddOwnerTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee28(_ref4, options) {\n        var ownerAddress, threshold, safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee28$(_context28) {\n          while (1) {\n            switch (_context28.prev = _context28.next) {\n              case 0:\n                ownerAddress = _ref4.ownerAddress, threshold = _ref4.threshold;\n                _context28.t0 = _objectSpread;\n                _context28.t1 = this.getAddress();\n                _context28.next = 5;\n                return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeAddOwnerWithThresholdData(ownerAddress, threshold);\n\n              case 5:\n                _context28.t2 = _context28.sent;\n                _context28.t3 = {\n                  to: _context28.t1,\n                  value: '0',\n                  data: _context28.t2\n                };\n                _context28.t4 = options;\n                safeTransactionData = (0, _context28.t0)(_context28.t3, _context28.t4);\n                _context28.next = 11;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 11:\n                safeTransaction = _context28.sent;\n                return _context28.abrupt(\"return\", safeTransaction);\n\n              case 13:\n              case \"end\":\n                return _context28.stop();\n            }\n          }\n        }, _callee28, this);\n      }));\n\n      function createAddOwnerTx(_x26, _x27) {\n        return _createAddOwnerTx.apply(this, arguments);\n      }\n\n      return createAddOwnerTx;\n    }()\n    /**\n     * Returns the Safe transaction to remove an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is not an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n\n  }, {\n    key: \"createRemoveOwnerTx\",\n    value: function () {\n      var _createRemoveOwnerTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee29(_ref5, options) {\n        var ownerAddress, threshold, safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee29$(_context29) {\n          while (1) {\n            switch (_context29.prev = _context29.next) {\n              case 0:\n                ownerAddress = _ref5.ownerAddress, threshold = _ref5.threshold;\n                _context29.t0 = _objectSpread;\n                _context29.t1 = this.getAddress();\n                _context29.next = 5;\n                return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeRemoveOwnerData(ownerAddress, threshold);\n\n              case 5:\n                _context29.t2 = _context29.sent;\n                _context29.t3 = {\n                  to: _context29.t1,\n                  value: '0',\n                  data: _context29.t2\n                };\n                _context29.t4 = options;\n                safeTransactionData = (0, _context29.t0)(_context29.t3, _context29.t4);\n                _context29.next = 11;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 11:\n                safeTransaction = _context29.sent;\n                return _context29.abrupt(\"return\", safeTransaction);\n\n              case 13:\n              case \"end\":\n                return _context29.stop();\n            }\n          }\n        }, _callee29, this);\n      }));\n\n      function createRemoveOwnerTx(_x28, _x29) {\n        return _createRemoveOwnerTx.apply(this, arguments);\n      }\n\n      return createRemoveOwnerTx;\n    }()\n    /**\n     * Returns the Safe transaction to replace an owner of the Safe with a new one.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid new owner address provided\"\n     * @throws \"Invalid old owner address provided\"\n     * @throws \"New address provided is already an owner\"\n     * @throws \"Old address provided is not an owner\"\n     */\n\n  }, {\n    key: \"createSwapOwnerTx\",\n    value: function () {\n      var _createSwapOwnerTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee30(_ref6, options) {\n        var oldOwnerAddress, newOwnerAddress, safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee30$(_context30) {\n          while (1) {\n            switch (_context30.prev = _context30.next) {\n              case 0:\n                oldOwnerAddress = _ref6.oldOwnerAddress, newOwnerAddress = _ref6.newOwnerAddress;\n                _context30.t0 = _objectSpread;\n                _context30.t1 = this.getAddress();\n                _context30.next = 5;\n                return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress);\n\n              case 5:\n                _context30.t2 = _context30.sent;\n                _context30.t3 = {\n                  to: _context30.t1,\n                  value: '0',\n                  data: _context30.t2\n                };\n                _context30.t4 = options;\n                safeTransactionData = (0, _context30.t0)(_context30.t3, _context30.t4);\n                _context30.next = 11;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 11:\n                safeTransaction = _context30.sent;\n                return _context30.abrupt(\"return\", safeTransaction);\n\n              case 13:\n              case \"end\":\n                return _context30.stop();\n            }\n          }\n        }, _callee30, this);\n      }));\n\n      function createSwapOwnerTx(_x30, _x31) {\n        return _createSwapOwnerTx.apply(this, arguments);\n      }\n\n      return createSwapOwnerTx;\n    }()\n    /**\n     * Returns the Safe transaction to change the threshold.\n     *\n     * @param threshold - The new threshold\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n\n  }, {\n    key: \"createChangeThresholdTx\",\n    value: function () {\n      var _createChangeThresholdTx = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee31(threshold, options) {\n        var safeTransactionData, safeTransaction;\n        return _regeneratorRuntime.wrap(function _callee31$(_context31) {\n          while (1) {\n            switch (_context31.prev = _context31.next) {\n              case 0:\n                _context31.t0 = _objectSpread;\n                _context31.t1 = this.getAddress();\n                _context31.next = 4;\n                return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeChangeThresholdData(threshold);\n\n              case 4:\n                _context31.t2 = _context31.sent;\n                _context31.t3 = {\n                  to: _context31.t1,\n                  value: '0',\n                  data: _context31.t2\n                };\n                _context31.t4 = options;\n                safeTransactionData = (0, _context31.t0)(_context31.t3, _context31.t4);\n                _context31.next = 10;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 10:\n                safeTransaction = _context31.sent;\n                return _context31.abrupt(\"return\", safeTransaction);\n\n              case 12:\n              case \"end\":\n                return _context31.stop();\n            }\n          }\n        }, _callee31, this);\n      }));\n\n      function createChangeThresholdTx(_x32, _x33) {\n        return _createChangeThresholdTx.apply(this, arguments);\n      }\n\n      return createChangeThresholdTx;\n    }()\n    /**\n     * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction\n     *\n     * @param serviceTransactionResponse - The transaction to convert\n     * @returns The converted transaction with type SafeTransaction\n     */\n\n  }, {\n    key: \"toSafeTransactionType\",\n    value: function () {\n      var _toSafeTransactionType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee32(serviceTransactionResponse) {\n        var _a, safeTransactionData, safeTransaction;\n\n        return _regeneratorRuntime.wrap(function _callee32$(_context32) {\n          while (1) {\n            switch (_context32.prev = _context32.next) {\n              case 0:\n                safeTransactionData = {\n                  to: serviceTransactionResponse.to,\n                  value: serviceTransactionResponse.value,\n                  data: serviceTransactionResponse.data || '0x',\n                  operation: serviceTransactionResponse.operation,\n                  safeTxGas: serviceTransactionResponse.safeTxGas,\n                  baseGas: serviceTransactionResponse.baseGas,\n                  gasPrice: Number(serviceTransactionResponse.gasPrice),\n                  gasToken: serviceTransactionResponse.gasToken,\n                  refundReceiver: serviceTransactionResponse.refundReceiver,\n                  nonce: serviceTransactionResponse.nonce\n                };\n                _context32.next = 3;\n                return this.createTransaction({\n                  safeTransactionData: safeTransactionData\n                });\n\n              case 3:\n                safeTransaction = _context32.sent;\n                (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map(function (confirmation) {\n                  var signature = new SafeSignature_1.default(confirmation.owner, confirmation.signature);\n                  safeTransaction.addSignature(signature);\n                });\n                return _context32.abrupt(\"return\", safeTransaction);\n\n              case 6:\n              case \"end\":\n                return _context32.stop();\n            }\n          }\n        }, _callee32, this);\n      }));\n\n      function toSafeTransactionType(_x34) {\n        return _toSafeTransactionType.apply(this, arguments);\n      }\n\n      return toSafeTransactionType;\n    }()\n    /**\n     * Checks if a Safe transaction can be executed successfully with no errors.\n     *\n     * @param safeTransaction - The Safe transaction to check\n     * @param options - The Safe transaction execution options. Optional\n     * @returns TRUE if the Safe transaction can be executed successfully with no errors\n     */\n\n  }, {\n    key: \"isValidTransaction\",\n    value: function () {\n      var _isValidTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee33(safeTransaction, options) {\n        var transaction, signedSafeTransaction, txHash, ownersWhoApprovedTx, _iterator2, _step2, owner, owners, signerAddress, isTxValid;\n\n        return _regeneratorRuntime.wrap(function _callee33$(_context33) {\n          while (1) {\n            switch (_context33.prev = _context33.next) {\n              case 0:\n                if (!(0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)) {\n                  _context33.next = 6;\n                  break;\n                }\n\n                _context33.next = 3;\n                return this.toSafeTransactionType(safeTransaction);\n\n              case 3:\n                _context33.t0 = _context33.sent;\n                _context33.next = 7;\n                break;\n\n              case 6:\n                _context33.t0 = safeTransaction;\n\n              case 7:\n                transaction = _context33.t0;\n                _context33.next = 10;\n                return this.copyTransaction(transaction);\n\n              case 10:\n                signedSafeTransaction = _context33.sent;\n                _context33.next = 13;\n                return this.getTransactionHash(signedSafeTransaction);\n\n              case 13:\n                txHash = _context33.sent;\n                _context33.next = 16;\n                return this.getOwnersWhoApprovedTx(txHash);\n\n              case 16:\n                ownersWhoApprovedTx = _context33.sent;\n                _iterator2 = _createForOfIteratorHelper(ownersWhoApprovedTx);\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    owner = _step2.value;\n                    signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _context33.next = 21;\n                return this.getOwners();\n\n              case 21:\n                owners = _context33.sent;\n                _context33.next = 24;\n                return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n\n              case 24:\n                signerAddress = _context33.sent;\n\n                if (signerAddress) {\n                  _context33.next = 27;\n                  break;\n                }\n\n                throw new Error('EthAdapter must be initialized with a signer to use this method');\n\n              case 27:\n                if (owners.includes(signerAddress)) {\n                  signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n                }\n\n                _context33.next = 30;\n                return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.isValidTransaction(signedSafeTransaction, _objectSpread({\n                  from: signerAddress\n                }, options));\n\n              case 30:\n                isTxValid = _context33.sent;\n                return _context33.abrupt(\"return\", isTxValid);\n\n              case 32:\n              case \"end\":\n                return _context33.stop();\n            }\n          }\n        }, _callee33, this);\n      }));\n\n      function isValidTransaction(_x35, _x36) {\n        return _isValidTransaction.apply(this, arguments);\n      }\n\n      return isValidTransaction;\n    }()\n    /**\n     * Executes a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction to execute\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"No signer provided\"\n     * @throws \"There are X signatures missing\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */\n\n  }, {\n    key: \"executeTransaction\",\n    value: function () {\n      var _executeTransaction = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee34(safeTransaction, options) {\n        var transaction, signedSafeTransaction, txHash, ownersWhoApprovedTx, _iterator3, _step3, owner, owners, signerAddress, threshold, signaturesMissing, value, balance, txResponse;\n\n        return _regeneratorRuntime.wrap(function _callee34$(_context34) {\n          while (1) {\n            switch (_context34.prev = _context34.next) {\n              case 0:\n                if (!(0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)) {\n                  _context34.next = 6;\n                  break;\n                }\n\n                _context34.next = 3;\n                return this.toSafeTransactionType(safeTransaction);\n\n              case 3:\n                _context34.t0 = _context34.sent;\n                _context34.next = 7;\n                break;\n\n              case 6:\n                _context34.t0 = safeTransaction;\n\n              case 7:\n                transaction = _context34.t0;\n                _context34.next = 10;\n                return this.copyTransaction(transaction);\n\n              case 10:\n                signedSafeTransaction = _context34.sent;\n                _context34.next = 13;\n                return this.getTransactionHash(signedSafeTransaction);\n\n              case 13:\n                txHash = _context34.sent;\n                _context34.next = 16;\n                return this.getOwnersWhoApprovedTx(txHash);\n\n              case 16:\n                ownersWhoApprovedTx = _context34.sent;\n                _iterator3 = _createForOfIteratorHelper(ownersWhoApprovedTx);\n\n                try {\n                  for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n                    owner = _step3.value;\n                    signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n                  }\n                } catch (err) {\n                  _iterator3.e(err);\n                } finally {\n                  _iterator3.f();\n                }\n\n                _context34.next = 21;\n                return this.getOwners();\n\n              case 21:\n                owners = _context34.sent;\n                _context34.next = 24;\n                return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n\n              case 24:\n                signerAddress = _context34.sent;\n\n                if (signerAddress && owners.includes(signerAddress)) {\n                  signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n                }\n\n                _context34.next = 28;\n                return this.getThreshold();\n\n              case 28:\n                threshold = _context34.sent;\n\n                if (!(threshold > signedSafeTransaction.signatures.size)) {\n                  _context34.next = 32;\n                  break;\n                }\n\n                signaturesMissing = threshold - signedSafeTransaction.signatures.size;\n                throw new Error(\"There \".concat(signaturesMissing > 1 ? 'are' : 'is', \" \").concat(signaturesMissing, \" signature\").concat(signaturesMissing > 1 ? 's' : '', \" missing\"));\n\n              case 32:\n                value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);\n\n                if (value.isZero()) {\n                  _context34.next = 39;\n                  break;\n                }\n\n                _context34.next = 36;\n                return this.getBalance();\n\n              case 36:\n                balance = _context34.sent;\n\n                if (!value.gt(bignumber_1.BigNumber.from(balance))) {\n                  _context34.next = 39;\n                  break;\n                }\n\n                throw new Error('Not enough Ether funds');\n\n              case 39:\n                if (!((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit))) {\n                  _context34.next = 41;\n                  break;\n                }\n\n                throw new Error('Cannot specify gas and gasLimit together in transaction options');\n\n              case 41:\n                _context34.next = 43;\n                return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.execTransaction(signedSafeTransaction, _objectSpread({\n                  from: signerAddress\n                }, options));\n\n              case 43:\n                txResponse = _context34.sent;\n                return _context34.abrupt(\"return\", txResponse);\n\n              case 45:\n              case \"end\":\n                return _context34.stop();\n            }\n          }\n        }, _callee34, this);\n      }));\n\n      function executeTransaction(_x37, _x38) {\n        return _executeTransaction.apply(this, arguments);\n      }\n\n      return executeTransaction;\n    }()\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee35(_ref7) {\n        var ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks, safeSdk;\n        return _regeneratorRuntime.wrap(function _callee35$(_context35) {\n          while (1) {\n            switch (_context35.prev = _context35.next) {\n              case 0:\n                ethAdapter = _ref7.ethAdapter, safeAddress = _ref7.safeAddress, isL1SafeMasterCopy = _ref7.isL1SafeMasterCopy, contractNetworks = _ref7.contractNetworks;\n                safeSdk = new Safe();\n                _context35.next = 4;\n                return safeSdk.init({\n                  ethAdapter: ethAdapter,\n                  safeAddress: safeAddress,\n                  isL1SafeMasterCopy: isL1SafeMasterCopy,\n                  contractNetworks: contractNetworks\n                });\n\n              case 4:\n                return _context35.abrupt(\"return\", safeSdk);\n\n              case 5:\n              case \"end\":\n                return _context35.stop();\n            }\n          }\n        }, _callee35);\n      }));\n\n      function create(_x39) {\n        return _create.apply(this, arguments);\n      }\n\n      return create;\n    }()\n  }]);\n\n  return Safe;\n}();\n\n_Safe_ethAdapter = new WeakMap(), _Safe_contractManager = new WeakMap(), _Safe_ownerManager = new WeakMap(), _Safe_moduleManager = new WeakMap(), _Safe_guardManager = new WeakMap(), _Safe_fallbackHandlerManager = new WeakMap();\nexports.default = Safe;","map":{"version":3,"sources":["../../src/Safe.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _Safe_ethAdapter, _Safe_contractManager, _Safe_ownerManager, _Safe_moduleManager, _Safe_guardManager, _Safe_fallbackHandlerManager;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\nconst contractManager_1 = __importDefault(require(\"./managers/contractManager\"));\nconst fallbackHandlerManager_1 = __importDefault(require(\"./managers/fallbackHandlerManager\"));\nconst guardManager_1 = __importDefault(require(\"./managers/guardManager\"));\nconst moduleManager_1 = __importDefault(require(\"./managers/moduleManager\"));\nconst ownerManager_1 = __importDefault(require(\"./managers/ownerManager\"));\nconst utils_1 = require(\"./utils\");\nconst signatures_1 = require(\"./utils/signatures\");\nconst SafeSignature_1 = __importDefault(require(\"./utils/signatures/SafeSignature\"));\nconst SafeTransaction_1 = __importDefault(require(\"./utils/transactions/SafeTransaction\"));\nconst utils_2 = require(\"./utils/transactions/utils\");\nclass Safe {\n    constructor() {\n        _Safe_ethAdapter.set(this, void 0);\n        _Safe_contractManager.set(this, void 0);\n        _Safe_ownerManager.set(this, void 0);\n        _Safe_moduleManager.set(this, void 0);\n        _Safe_guardManager.set(this, void 0);\n        _Safe_fallbackHandlerManager.set(this, void 0);\n    }\n    /**\n     * Creates an instance of the Safe Core SDK.\n     * @param config - Ethers Safe configuration\n     * @returns The Safe Core SDK instance\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */\n    static async create({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        const safeSdk = new Safe();\n        await safeSdk.init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks });\n        return safeSdk;\n    }\n    /**\n     * Initializes the Safe Core SDK instance.\n     * @param config - Safe configuration\n     * @throws \"Signer must be connected to a provider\"\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */\n    async init({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        __classPrivateFieldSet(this, _Safe_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _Safe_contractManager, await contractManager_1.default.create({\n            ethAdapter: __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n            safeAddress,\n            isL1SafeMasterCopy,\n            contractNetworks\n        }), \"f\");\n        __classPrivateFieldSet(this, _Safe_ownerManager, new ownerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_moduleManager, new moduleManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_guardManager, new guardManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n        __classPrivateFieldSet(this, _Safe_fallbackHandlerManager, new fallbackHandlerManager_1.default(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract), \"f\");\n    }\n    /**\n     * Returns a new instance of the Safe Core SDK.\n     * @param config - Connect Safe configuration\n     * @throws \"SafeProxy contract is not deployed on the current network\"\n     * @throws \"MultiSend contract is not deployed on the current network\"\n     * @throws \"MultiSendCallOnly contract is not deployed on the current network\"\n     */\n    async connect({ ethAdapter, safeAddress, isL1SafeMasterCopy, contractNetworks }) {\n        return await Safe.create({\n            ethAdapter: ethAdapter || __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"),\n            safeAddress: safeAddress || this.getAddress(),\n            isL1SafeMasterCopy: isL1SafeMasterCopy || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").isL1SafeMasterCopy,\n            contractNetworks: contractNetworks || __classPrivateFieldGet(this, _Safe_contractManager, \"f\").contractNetworks\n        });\n    }\n    /**\n     * Returns the address of the current SafeProxy contract.\n     *\n     * @returns The address of the SafeProxy contract\n     */\n    getAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getAddress();\n    }\n    /**\n     * Returns the ContractManager\n     *\n     * @returns The current ContractManager\n     * */\n    getContractManager() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\");\n    }\n    /**\n     * Returns the current EthAdapter.\n     *\n     * @returns The current EthAdapter\n     */\n    getEthAdapter() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\");\n    }\n    /**\n     * Returns the address of the MultiSend contract.\n     *\n     * @returns The address of the MultiSend contract\n     */\n    getMultiSendAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract.getAddress();\n    }\n    /**\n     * Returns the address of the MultiSendCallOnly contract.\n     *\n     * @returns The address of the MultiSendCallOnly contract\n     */\n    getMultiSendCallOnlyAddress() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract.getAddress();\n    }\n    /**\n     * Returns the Safe Master Copy contract version.\n     *\n     * @returns The Safe Master Copy contract version\n     */\n    async getContractVersion() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getVersion();\n    }\n    /**\n     * Returns the list of Safe owner accounts.\n     *\n     * @returns The list of owners\n     */\n    async getOwners() {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getOwners();\n    }\n    /**\n     * Returns the Safe nonce.\n     *\n     * @returns The Safe nonce\n     */\n    async getNonce() {\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getNonce();\n    }\n    /**\n     * Returns the Safe threshold.\n     *\n     * @returns The Safe threshold\n     */\n    async getThreshold() {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").getThreshold();\n    }\n    /**\n     * Returns the chainId of the connected network.\n     *\n     * @returns The chainId of the connected network\n     */\n    async getChainId() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getChainId();\n    }\n    /**\n     * Returns the ETH balance of the Safe.\n     *\n     * @returns The ETH balance of the Safe\n     */\n    async getBalance() {\n        return __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getBalance(this.getAddress());\n    }\n    /**\n     * Returns the address of the FallbackHandler contract.\n     *\n     * @returns The address of the FallbackHandler contract\n     */\n    getFallbackHandler() {\n        return __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").getFallbackHandler();\n    }\n    /**\n     * Returns the enabled Safe guard or 0x address if no guards are enabled.\n     *\n     * @returns The address of the enabled Safe guard\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n    async getGuard() {\n        return __classPrivateFieldGet(this, _Safe_guardManager, \"f\").getGuard();\n    }\n    /**\n     * Returns the list of addresses of all the enabled Safe modules.\n     *\n     * @returns The list of addresses of all the enabled Safe modules\n     */\n    async getModules() {\n        return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").getModules();\n    }\n    /**\n     * Checks if a specific Safe module is enabled for the current Safe.\n     *\n     * @param moduleAddress - The desired module address\n     * @returns TRUE if the module is enabled\n     */\n    async isModuleEnabled(moduleAddress) {\n        return __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").isModuleEnabled(moduleAddress);\n    }\n    /**\n     * Checks if a specific address is an owner of the current Safe.\n     *\n     * @param ownerAddress - The account address\n     * @returns TRUE if the account is an owner\n     */\n    async isOwner(ownerAddress) {\n        return __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").isOwner(ownerAddress);\n    }\n    /**\n     * Returns a Safe transaction ready to be signed by the owners.\n     *\n     * @param createTransactionProps - The createTransaction props\n     * @returns The Safe transaction\n     * @throws \"Invalid empty array of transactions\"\n     */\n    async createTransaction({ safeTransactionData, onlyCalls = false, options }) {\n        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length === 0) {\n            throw new Error('Invalid empty array of transactions');\n        }\n        let newTransaction;\n        if ((0, utils_1.isMetaTransactionArray)(safeTransactionData) && safeTransactionData.length > 1) {\n            const multiSendContract = onlyCalls\n                ? __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendCallOnlyContract\n                : __classPrivateFieldGet(this, _Safe_contractManager, \"f\").multiSendContract;\n            const multiSendData = (0, utils_2.encodeMultiSendData)(safeTransactionData.map(utils_2.standardizeMetaTransactionData));\n            const multiSendTransaction = {\n                ...options,\n                to: multiSendContract.getAddress(),\n                value: '0',\n                data: multiSendContract.encode('multiSend', [multiSendData]),\n                operation: safe_core_sdk_types_1.OperationType.DelegateCall\n            };\n            newTransaction = multiSendTransaction;\n        }\n        else {\n            newTransaction = (0, utils_1.isMetaTransactionArray)(safeTransactionData)\n                ? { ...options, ...safeTransactionData[0] }\n                : safeTransactionData;\n        }\n        const standardizedTransaction = await (0, utils_2.standardizeSafeTransactionData)(__classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract, __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), newTransaction);\n        return new SafeTransaction_1.default(standardizedTransaction);\n    }\n    /**\n     * Returns a Safe transaction ready to be signed by the owners that invalidates the pending Safe transaction/s with a specific nonce.\n     *\n     * @param nonce - The nonce of the transaction/s that are going to be rejected\n     * @returns The Safe transaction that invalidates the pending Safe transaction/s\n     */\n    async createRejectionTransaction(nonce) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            nonce,\n            value: '0',\n            data: '0x',\n            safeTxGas: 0\n        };\n        return this.createTransaction({ safeTransactionData });\n    }\n    /**\n     * Copies a Safe transaction\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The new Safe transaction\n     */\n    async copyTransaction(safeTransaction) {\n        const signedSafeTransaction = await this.createTransaction({\n            safeTransactionData: safeTransaction.data\n        });\n        safeTransaction.signatures.forEach((signature) => {\n            signedSafeTransaction.addSignature(signature);\n        });\n        return signedSafeTransaction;\n    }\n    /**\n     * Returns the transaction hash of a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction\n     * @returns The transaction hash of the Safe transaction\n     */\n    async getTransactionHash(safeTransaction) {\n        const safeTransactionData = safeTransaction.data;\n        const txHash = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.getTransactionHash(safeTransactionData);\n        return txHash;\n    }\n    /**\n     * Signs a hash using the current signer account.\n     *\n     * @param hash - The hash to sign\n     * @returns The Safe signature\n     */\n    async signTransactionHash(hash) {\n        return (0, signatures_1.generateSignature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), hash);\n    }\n    /**\n     * Signs a transaction according to the EIP-712 using the current signer account.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param methodVersion - EIP-712 version. Optional\n     * @returns The Safe signature\n     */\n    async signTypedData(safeTransaction, methodVersion) {\n        const safeTransactionEIP712Args = {\n            safeAddress: this.getAddress(),\n            safeVersion: await this.getContractVersion(),\n            chainId: await this.getEthAdapter().getChainId(),\n            safeTransactionData: safeTransaction.data\n        };\n        return (0, signatures_1.generateEIP712Signature)(__classPrivateFieldGet(this, _Safe_ethAdapter, \"f\"), safeTransactionEIP712Args, methodVersion);\n    }\n    /**\n     * Adds the signature of the current signer to the Safe transaction object.\n     *\n     * @param safeTransaction - The Safe transaction to be signed\n     * @param signingMethod - Method followed to sign a transaction. Optional. Default value is \"eth_sign\"\n     * @returns The signed Safe transaction\n     * @throws \"Transactions can only be signed by Safe owners\"\n     */\n    async signTransaction(safeTransaction, signingMethod = 'eth_sign') {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)\n            ? await this.toSafeTransactionType(safeTransaction)\n            : safeTransaction;\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error('EthAdapter must be initialized with a signer to use this method');\n        }\n        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n        if (!addressIsOwner) {\n            throw new Error('Transactions can only be signed by Safe owners');\n        }\n        let signature;\n        if (signingMethod === 'eth_signTypedData') {\n            signature = await this.signTypedData(transaction);\n        }\n        else {\n            const txHash = await this.getTransactionHash(transaction);\n            signature = await this.signTransactionHash(txHash);\n        }\n        const signedSafeTransaction = await this.createTransaction({\n            safeTransactionData: transaction.data\n        });\n        transaction.signatures.forEach((signature) => {\n            signedSafeTransaction.addSignature(signature);\n        });\n        signedSafeTransaction.addSignature(signature);\n        return signedSafeTransaction;\n    }\n    /**\n     * Approves on-chain a hash using the current signer account.\n     *\n     * @param hash - The hash to approve\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"Transaction hashes can only be approved by Safe owners\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */\n    async approveTransactionHash(hash, options) {\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error('EthAdapter must be initialized with a signer to use this method');\n        }\n        const addressIsOwner = owners.find((owner) => signerAddress && (0, utils_1.sameString)(owner, signerAddress));\n        if (!addressIsOwner) {\n            throw new Error('Transaction hashes can only be approved by Safe owners');\n        }\n        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n            throw new Error('Cannot specify gas and gasLimit together in transaction options');\n        }\n        return __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approveHash(hash, {\n            from: signerAddress,\n            ...options\n        });\n    }\n    /**\n     * Returns a list of owners who have approved a specific Safe transaction.\n     *\n     * @param txHash - The Safe transaction hash\n     * @returns The list of owners\n     */\n    async getOwnersWhoApprovedTx(txHash) {\n        const owners = await this.getOwners();\n        let ownersWhoApproved = [];\n        for (const owner of owners) {\n            const approved = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.approvedHashes(owner, txHash);\n            if (approved.gt(0)) {\n                ownersWhoApproved.push(owner);\n            }\n        }\n        return ownersWhoApproved;\n    }\n    /**\n     * Returns the Safe transaction to enable the fallback handler.\n     *\n     * @param address - The new fallback handler address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid fallback handler address provided\"\n     * @throws \"Fallback handler provided is already enabled\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */\n    async createEnableFallbackHandlerTx(fallbackHandlerAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeEnableFallbackHandlerData(fallbackHandlerAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable the fallback handler.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no fallback handler enabled yet\"\n     * @throws \"Current version of the Safe does not support the fallback handler functionality\"\n     */\n    async createDisableFallbackHandlerTx(options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_fallbackHandlerManager, \"f\").encodeDisableFallbackHandlerData(),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to enable a Safe guard.\n     *\n     * @param guardAddress - The desired guard address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid guard address provided\"\n     * @throws \"Guard provided is already enabled\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n    async createEnableGuardTx(guardAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeEnableGuardData(guardAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable a Safe guard.\n     *\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"There is no guard enabled yet\"\n     * @throws \"Current version of the Safe does not support Safe transaction guards functionality\"\n     */\n    async createDisableGuardTx(options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_guardManager, \"f\").encodeDisableGuardData(),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to enable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is already enabled\"\n     */\n    async createEnableModuleTx(moduleAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeEnableModuleData(moduleAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to disable a Safe module.\n     *\n     * @param moduleAddress - The desired module address\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid module address provided\"\n     * @throws \"Module provided is not enabled already\"\n     */\n    async createDisableModuleTx(moduleAddress, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_moduleManager, \"f\").encodeDisableModuleData(moduleAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to add an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is already an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n    async createAddOwnerTx({ ownerAddress, threshold }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeAddOwnerWithThresholdData(ownerAddress, threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to remove an owner and optionally change the threshold.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid owner address provided\"\n     * @throws \"Address provided is not an owner\"\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n    async createRemoveOwnerTx({ ownerAddress, threshold }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeRemoveOwnerData(ownerAddress, threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to replace an owner of the Safe with a new one.\n     *\n     * @param params - The transaction params\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Invalid new owner address provided\"\n     * @throws \"Invalid old owner address provided\"\n     * @throws \"New address provided is already an owner\"\n     * @throws \"Old address provided is not an owner\"\n     */\n    async createSwapOwnerTx({ oldOwnerAddress, newOwnerAddress }, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Returns the Safe transaction to change the threshold.\n     *\n     * @param threshold - The new threshold\n     * @param options - The transaction optional properties\n     * @returns The Safe transaction ready to be signed\n     * @throws \"Threshold needs to be greater than 0\"\n     * @throws \"Threshold cannot exceed owner count\"\n     */\n    async createChangeThresholdTx(threshold, options) {\n        const safeTransactionData = {\n            to: this.getAddress(),\n            value: '0',\n            data: await __classPrivateFieldGet(this, _Safe_ownerManager, \"f\").encodeChangeThresholdData(threshold),\n            ...options\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        return safeTransaction;\n    }\n    /**\n     * Converts a transaction from type SafeMultisigTransactionResponse to type SafeTransaction\n     *\n     * @param serviceTransactionResponse - The transaction to convert\n     * @returns The converted transaction with type SafeTransaction\n     */\n    async toSafeTransactionType(serviceTransactionResponse) {\n        var _a;\n        const safeTransactionData = {\n            to: serviceTransactionResponse.to,\n            value: serviceTransactionResponse.value,\n            data: serviceTransactionResponse.data || '0x',\n            operation: serviceTransactionResponse.operation,\n            safeTxGas: serviceTransactionResponse.safeTxGas,\n            baseGas: serviceTransactionResponse.baseGas,\n            gasPrice: Number(serviceTransactionResponse.gasPrice),\n            gasToken: serviceTransactionResponse.gasToken,\n            refundReceiver: serviceTransactionResponse.refundReceiver,\n            nonce: serviceTransactionResponse.nonce\n        };\n        const safeTransaction = await this.createTransaction({ safeTransactionData });\n        (_a = serviceTransactionResponse.confirmations) === null || _a === void 0 ? void 0 : _a.map((confirmation) => {\n            const signature = new SafeSignature_1.default(confirmation.owner, confirmation.signature);\n            safeTransaction.addSignature(signature);\n        });\n        return safeTransaction;\n    }\n    /**\n     * Checks if a Safe transaction can be executed successfully with no errors.\n     *\n     * @param safeTransaction - The Safe transaction to check\n     * @param options - The Safe transaction execution options. Optional\n     * @returns TRUE if the Safe transaction can be executed successfully with no errors\n     */\n    async isValidTransaction(safeTransaction, options) {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)\n            ? await this.toSafeTransactionType(safeTransaction)\n            : safeTransaction;\n        const signedSafeTransaction = await this.copyTransaction(transaction);\n        const txHash = await this.getTransactionHash(signedSafeTransaction);\n        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n        for (const owner of ownersWhoApprovedTx) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n        }\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (!signerAddress) {\n            throw new Error('EthAdapter must be initialized with a signer to use this method');\n        }\n        if (owners.includes(signerAddress)) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n        }\n        const isTxValid = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.isValidTransaction(signedSafeTransaction, {\n            from: signerAddress,\n            ...options\n        });\n        return isTxValid;\n    }\n    /**\n     * Executes a Safe transaction.\n     *\n     * @param safeTransaction - The Safe transaction to execute\n     * @param options - The Safe transaction execution options. Optional\n     * @returns The Safe transaction response\n     * @throws \"No signer provided\"\n     * @throws \"There are X signatures missing\"\n     * @throws \"Cannot specify gas and gasLimit together in transaction options\"\n     */\n    async executeTransaction(safeTransaction, options) {\n        let transaction = (0, utils_1.isSafeMultisigTransactionResponse)(safeTransaction)\n            ? await this.toSafeTransactionType(safeTransaction)\n            : safeTransaction;\n        const signedSafeTransaction = await this.copyTransaction(transaction);\n        const txHash = await this.getTransactionHash(signedSafeTransaction);\n        const ownersWhoApprovedTx = await this.getOwnersWhoApprovedTx(txHash);\n        for (const owner of ownersWhoApprovedTx) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(owner));\n        }\n        const owners = await this.getOwners();\n        const signerAddress = await __classPrivateFieldGet(this, _Safe_ethAdapter, \"f\").getSignerAddress();\n        if (signerAddress && owners.includes(signerAddress)) {\n            signedSafeTransaction.addSignature((0, signatures_1.generatePreValidatedSignature)(signerAddress));\n        }\n        const threshold = await this.getThreshold();\n        if (threshold > signedSafeTransaction.signatures.size) {\n            const signaturesMissing = threshold - signedSafeTransaction.signatures.size;\n            throw new Error(`There ${signaturesMissing > 1 ? 'are' : 'is'} ${signaturesMissing} signature${signaturesMissing > 1 ? 's' : ''} missing`);\n        }\n        const value = bignumber_1.BigNumber.from(signedSafeTransaction.data.value);\n        if (!value.isZero()) {\n            const balance = await this.getBalance();\n            if (value.gt(bignumber_1.BigNumber.from(balance))) {\n                throw new Error('Not enough Ether funds');\n            }\n        }\n        if ((options === null || options === void 0 ? void 0 : options.gas) && (options === null || options === void 0 ? void 0 : options.gasLimit)) {\n            throw new Error('Cannot specify gas and gasLimit together in transaction options');\n        }\n        const txResponse = await __classPrivateFieldGet(this, _Safe_contractManager, \"f\").safeContract.execTransaction(signedSafeTransaction, {\n            from: signerAddress,\n            ...options\n        });\n        return txResponse;\n    }\n}\n_Safe_ethAdapter = new WeakMap(), _Safe_contractManager = new WeakMap(), _Safe_ownerManager = new WeakMap(), _Safe_moduleManager = new WeakMap(), _Safe_guardManager = new WeakMap(), _Safe_fallbackHandlerManager = new WeakMap();\nexports.default = Safe;\n//# sourceMappingURL=Safe.js.map"]},"metadata":{},"sourceType":"script"}