{"ast":null,"code":"var _jsxFileName = \"/home/ravi/coinflip/coin-flip-test-main/src/Wallet.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport styles from './Wallet.module.css';\nimport simple_token_abi from './Contracts/simple_token_abi.json';\nimport Interactions from './Interactions';\nimport Interactions1 from './Interactions1';\nimport EthersAdapter from '@safe-global/safe-ethers-lib';\nimport Safe, { SafeFactory, EthSignSignature } from '@safe-global/safe-core-sdk';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  // ganache-cli address\n  const contractAddress = '0xad86835f962a1F28aB3bafa771aaf5C86eC6D40d';\n  const [tokenName, setTokenName] = useState(\"Coin Flip Game\");\n  const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log('need to install metamask');\n      setErrorMessage('Please install MetaMask');\n    }\n  };\n\n  const accountChangedHandler = newAddress => {\n    setDefaultAccount(newAddress);\n    updateEthers();\n  };\n\n  const updateEthers = () => {\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    let tempSigner = tempProvider.getSigner();\n    const ethAdapter = new EthersAdapter({\n      ethers,\n      signerOrProvider: tempSigner\n    }); //\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner)\n\n    setProvider(tempProvider);\n    setSigner(tempSigner);\n    setContract(ethAdapter);\n  };\n\n  useEffect(() => {\n    if (contract != null) {//\tupdateBalance();\n      //\tupdateTokenName();\n    }\n  }, [contract]);\n\n  const updateBalance = async () => {\n    let balanceBigN = await contract.getuserBalance();\n    let balanceNumber = balanceBigN.toNumber(); //\tlet decimals = await contract.decimals();\n    //\tlet tokenBalance = balanceNumber / Math.pow(10, decimals);\n\n    setBalance(balanceNumber);\n    console.log(balanceNumber);\n  };\n\n  const updateTokenName = async () => {\n    let betBoolean = true;\n    console.log(betBoolean);\n    let txt = await contract.flip(betBoolean);\n    console.log(txt);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", tokenName, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", \"Refresh the page after performing any action.\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\" \", \"Step-1. Connect your metamask by clicking below\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: styles.button6,\n      onClick: connectWalletHandler,\n      children: connButtonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.walletCard,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Address: \", defaultAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 4\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [tokenName, \" User Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 4\n      }, this), errorMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(Interactions1, {\n      contract: contract\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 2\n  }, this);\n};\n\n_s(Wallet, \"Fs9JWXVyLQD811O2BE7UmuhKcPo=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/home/ravi/coinflip/coin-flip-test-main/src/Wallet.js"],"names":["React","useState","useEffect","ethers","styles","simple_token_abi","Interactions","Interactions1","EthersAdapter","Safe","SafeFactory","EthSignSignature","Wallet","contractAddress","tokenName","setTokenName","connButtonText","setConnButtonText","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","balance","setBalance","provider","setProvider","signer","setSigner","contract","setContract","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAddress","updateEthers","tempProvider","providers","Web3Provider","tempSigner","getSigner","ethAdapter","signerOrProvider","updateBalance","balanceBigN","getuserBalance","balanceNumber","toNumber","updateTokenName","betBoolean","txt","flip","button6","walletCard"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\nimport simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport Interactions1 from './Interactions1';\nimport EthersAdapter from '@safe-global/safe-ethers-lib'\nimport Safe, { SafeFactory, EthSignSignature } from '@safe-global/safe-core-sdk'\n\nconst Wallet = () => {\n\n\t// ganache-cli address\n\tconst contractAddress = '0xad86835f962a1F28aB3bafa771aaf5C86eC6D40d';\n\n\tconst [tokenName, setTokenName] = useState(\"Coin Flip Game\");\n\tconst [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [balance, setBalance] = useState(null);\n\n\tconst [provider, setProvider] = useState(null);\n\tconst [signer, setSigner] = useState(null);\n\tconst [contract, setContract] = useState(null);\n\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\n\t\t\twindow.ethereum.request({method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t})\n\n\n\t\t} else {\n\t\t\tconsole.log('need to install metamask');\n\t\t\tsetErrorMessage('Please install MetaMask');\n\t\t}\n\t}\n\n\n\n\n\n\tconst accountChangedHandler = (newAddress) => {\n\t\tsetDefaultAccount(newAddress);\n\t\tupdateEthers();\n\t}\n\n\tconst updateEthers = () => {\n\t\tlet tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n\t\tlet tempSigner = tempProvider.getSigner();\n\n\n\t\tconst ethAdapter = new EthersAdapter({\n\t\t\tethers,\n\t\t\tsignerOrProvider: tempSigner\n\t\t})\n\n\n\t//\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner)\n\n\t\tsetProvider(tempProvider);\n\t\tsetSigner(tempSigner);\n\t\tsetContract(ethAdapter);\n\t}\n\n\tuseEffect(() => {\n\t\tif (contract != null) {\n\t\t//\tupdateBalance();\n\t\t//\tupdateTokenName();\n\t\t}\n\t}, [contract])\n\n\tconst updateBalance = async () => {\n\t\tlet balanceBigN = await contract.getuserBalance();\n\t\tlet balanceNumber = balanceBigN.toNumber();\n\n\t//\tlet decimals = await contract.decimals();\n\n\t//\tlet tokenBalance = balanceNumber / Math.pow(10, decimals);\n\n\t\tsetBalance(balanceNumber);\n\t\tconsole.log(balanceNumber);\n\t}\n\n\tconst updateTokenName = async () => {\n\n\t\t\n\t\tlet betBoolean = true;\n\t\tconsole.log(betBoolean)\n\t\tlet txt = await contract.flip(betBoolean);\n\t\tconsole.log(txt);\n\t}\n\t\nreturn (\n\t<div>\n\t\t<h2> {tokenName} </h2>\n\t\t\t<h2> {\"Refresh the page after performing any action.\"} </h2>\n\t\t<h2> {\"Step-1. Connect your metamask by clicking below\"} </h2>\n\t\t<button className={styles.button6} onClick={connectWalletHandler}>{connButtonText}</button>\n\n\t\t<div className = {styles.walletCard}>\n\t\t\t<div>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<h3>{tokenName} User Balance: {balance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t\t</div>\n\n\t\t<Interactions1 contract={contract}/>\n\t\t\t{/* <Interactions contract={contract}/> */}\n\n\t\t\n\t</div>\n\t);\n}\n\nexport default Wallet;"]},"metadata":{},"sourceType":"module"}