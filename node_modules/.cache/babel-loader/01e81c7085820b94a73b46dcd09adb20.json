{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.estimateTxGas = void 0;\n\nvar bignumber_1 = require(\"@ethersproject/bignumber\");\n\nvar safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\n\nfunction estimateDataGasCosts(data) {\n  var reducer = function reducer(accumulator, currentValue) {\n    if (currentValue === '0x') {\n      return accumulator + 0;\n    }\n\n    if (currentValue === '00') {\n      return accumulator + 4;\n    }\n\n    return accumulator + 16;\n  };\n\n  return data.match(/.{2}/g).reduce(reducer, 0);\n}\n\nfunction estimateTxGas(_x, _x2, _x3, _x4, _x5, _x6) {\n  return _estimateTxGas.apply(this, arguments);\n}\n\nfunction _estimateTxGas() {\n  _estimateTxGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(safeContract, ethAdapter, to, valueInWei, data, operation) {\n    var txGasEstimation, safeAddress, estimateData, estimateResponse, dataGasEstimation, additionalGas, i, _estimateResponse, estimateGas;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            txGasEstimation = 0;\n            safeAddress = safeContract.getAddress();\n            estimateData = safeContract.encode('requiredTxGas', [to, valueInWei, data, operation]);\n            _context.prev = 3;\n            _context.next = 6;\n            return ethAdapter.estimateGas({\n              to: safeAddress,\n              from: safeAddress,\n              data: estimateData\n            });\n\n          case 6:\n            estimateResponse = _context.sent.toString();\n            txGasEstimation = bignumber_1.BigNumber.from('0x' + estimateResponse.substring(138)).toNumber() + 10000;\n            _context.next = 12;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](3);\n\n          case 12:\n            if (!(txGasEstimation > 0)) {\n              _context.next = 33;\n              break;\n            }\n\n            dataGasEstimation = estimateDataGasCosts(estimateData);\n            additionalGas = 10000;\n            i = 0;\n\n          case 16:\n            if (!(i < 10)) {\n              _context.next = 32;\n              break;\n            }\n\n            _context.prev = 17;\n            _context.next = 20;\n            return ethAdapter.call({\n              to: safeAddress,\n              from: safeAddress,\n              data: estimateData,\n              gasPrice: 0,\n              gasLimit: txGasEstimation + dataGasEstimation + additionalGas\n            });\n\n          case 20:\n            _estimateResponse = _context.sent;\n\n            if (!(_estimateResponse !== '0x')) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 32);\n\n          case 23:\n            _context.next = 27;\n            break;\n\n          case 25:\n            _context.prev = 25;\n            _context.t1 = _context[\"catch\"](17);\n\n          case 27:\n            txGasEstimation += additionalGas;\n            additionalGas *= 2;\n\n          case 29:\n            i++;\n            _context.next = 16;\n            break;\n\n          case 32:\n            return _context.abrupt(\"return\", txGasEstimation + additionalGas);\n\n          case 33:\n            _context.prev = 33;\n            _context.next = 36;\n            return ethAdapter.estimateGas({\n              to: to,\n              from: safeAddress,\n              value: valueInWei,\n              data: data\n            });\n\n          case 36:\n            estimateGas = _context.sent;\n            return _context.abrupt(\"return\", estimateGas);\n\n          case 40:\n            _context.prev = 40;\n            _context.t2 = _context[\"catch\"](33);\n\n            if (!(operation === safe_core_sdk_types_1.OperationType.DelegateCall)) {\n              _context.next = 44;\n              break;\n            }\n\n            return _context.abrupt(\"return\", 0);\n\n          case 44:\n            return _context.abrupt(\"return\", Promise.reject(_context.t2));\n\n          case 45:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[3, 10], [17, 25], [33, 40]]);\n  }));\n  return _estimateTxGas.apply(this, arguments);\n}\n\nexports.estimateTxGas = estimateTxGas;","map":{"version":3,"sources":["../../../../src/utils/transactions/gas.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.estimateTxGas = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst safe_core_sdk_types_1 = require(\"@safe-global/safe-core-sdk-types\");\nfunction estimateDataGasCosts(data) {\n    const reducer = (accumulator, currentValue) => {\n        if (currentValue === '0x') {\n            return accumulator + 0;\n        }\n        if (currentValue === '00') {\n            return accumulator + 4;\n        }\n        return accumulator + 16;\n    };\n    return data.match(/.{2}/g).reduce(reducer, 0);\n}\nasync function estimateTxGas(safeContract, ethAdapter, to, valueInWei, data, operation) {\n    let txGasEstimation = 0;\n    const safeAddress = safeContract.getAddress();\n    const estimateData = safeContract.encode('requiredTxGas', [\n        to,\n        valueInWei,\n        data,\n        operation\n    ]);\n    try {\n        const estimateResponse = (await ethAdapter.estimateGas({\n            to: safeAddress,\n            from: safeAddress,\n            data: estimateData\n        })).toString();\n        txGasEstimation = bignumber_1.BigNumber.from('0x' + estimateResponse.substring(138)).toNumber() + 10000;\n    }\n    catch (error) { }\n    if (txGasEstimation > 0) {\n        const dataGasEstimation = estimateDataGasCosts(estimateData);\n        let additionalGas = 10000;\n        for (let i = 0; i < 10; i++) {\n            try {\n                const estimateResponse = await ethAdapter.call({\n                    to: safeAddress,\n                    from: safeAddress,\n                    data: estimateData,\n                    gasPrice: 0,\n                    gasLimit: txGasEstimation + dataGasEstimation + additionalGas\n                });\n                if (estimateResponse !== '0x') {\n                    break;\n                }\n            }\n            catch (error) { }\n            txGasEstimation += additionalGas;\n            additionalGas *= 2;\n        }\n        return txGasEstimation + additionalGas;\n    }\n    try {\n        const estimateGas = await ethAdapter.estimateGas({\n            to,\n            from: safeAddress,\n            value: valueInWei,\n            data\n        });\n        return estimateGas;\n    }\n    catch (error) {\n        if (operation === safe_core_sdk_types_1.OperationType.DelegateCall) {\n            return 0;\n        }\n        return Promise.reject(error);\n    }\n}\nexports.estimateTxGas = estimateTxGas;\n//# sourceMappingURL=gas.js.map"]},"metadata":{},"sourceType":"script"}