{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../../utils\");\n\nclass CreateCallEthersContract {\n  constructor(contract) {\n    this.contract = contract;\n\n    this.encode = (methodName, params) => {\n      return this.contract.interface.encodeFunctionData(methodName, params);\n    };\n  }\n\n  getAddress() {\n    return this.contract.address;\n  }\n\n  async performCreate2(value, deploymentData, salt, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('performCreate2', [value, deploymentData, salt], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async performCreate(value, deploymentData, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('performCreate', [value, deploymentData], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.performCreate(value, deploymentData, options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async estimateGas(methodName, params, options) {\n    return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n  }\n\n}\n\nexports.default = CreateCallEthersContract;","map":{"version":3,"sources":["../../../../src/contracts/CreateCall/CreateCallEthersContract.ts"],"names":[],"mappings":";;;;;;AAMA,MAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,MAAe,wBAAf,CAAuC;AACrC,EAAA,WAAA,CAAmB,QAAnB,EAA8C;AAA3B,SAAA,QAAA,GAAA,QAAA;;AAmCnB,SAAA,MAAA,GAA4D,CAC1D,UAD0D,EAE1D,MAF0D,KAGhD;AACV,aAAO,KAAK,QAAL,CAAc,SAAd,CAAwB,kBAAxB,CAA2C,UAA3C,EAAuD,MAAvD,CAAP;AACD,KALD;AAnCkD;;AAElD,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,QAAL,CAAc,OAArB;AACD;;AAEmB,QAAd,cAAc,CAClB,KADkB,EAElB,cAFkB,EAGlB,IAHkB,EAIlB,OAJkB,EAIgB;AAElC,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAxB,EAAkC;AAChC,MAAA,OAAO,CAAC,QAAR,GAAmB,MAAM,KAAK,WAAL,CAAiB,gBAAjB,EAAmC,CAAC,KAAD,EAAQ,cAAR,EAAwB,IAAxB,CAAnC,EAAkE,EACzF,GAAG;AADsF,OAAlE,CAAzB;AAGD;;AACD,UAAM,UAAU,GAAG,MAAM,KAAK,QAAL,CAAc,cAAd,CAA6B,KAA7B,EAAoC,cAApC,EAAoD,IAApD,EAA0D,OAA1D,CAAzB;AACA,WAAO,CAAA,GAAA,OAAA,CAAA,UAAA,EAAW,UAAX,EAAuB,OAAvB,CAAP;AACD;;AAEkB,QAAb,aAAa,CACjB,KADiB,EAEjB,cAFiB,EAGjB,OAHiB,EAGiB;AAElC,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAxB,EAAkC;AAChC,MAAA,OAAO,CAAC,QAAR,GAAmB,MAAM,KAAK,WAAL,CAAiB,eAAjB,EAAkC,CAAC,KAAD,EAAQ,cAAR,CAAlC,EAA2D,EAClF,GAAG;AAD+E,OAA3D,CAAzB;AAGD;;AACD,UAAM,UAAU,GAAG,MAAM,KAAK,QAAL,CAAc,aAAd,CAA4B,KAA5B,EAAmC,cAAnC,EAAmD,OAAnD,CAAzB;AACA,WAAO,CAAA,GAAA,OAAA,CAAA,UAAA,EAAW,UAAX,EAAuB,OAAvB,CAAP;AACD;;AASgB,QAAX,WAAW,CACf,UADe,EAEf,MAFe,EAGf,OAHe,EAGkB;AAEjC,WAAO,CAAC,MAAO,KAAK,QAAL,CAAc,WAAd,CAAkC,UAAlC,EAA8C,GAAG,MAAjD,EAAyD,OAAzD,CAAR,EAA2E,QAA3E,EAAP;AACD;;AAjDoC;;AAoDvC,OAAA,CAAA,OAAA,GAAe,wBAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../../utils\");\nclass CreateCallEthersContract {\n    constructor(contract) {\n        this.contract = contract;\n        this.encode = (methodName, params) => {\n            return this.contract.interface.encodeFunctionData(methodName, params);\n        };\n    }\n    getAddress() {\n        return this.contract.address;\n    }\n    async performCreate2(value, deploymentData, salt, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('performCreate2', [value, deploymentData, salt], {\n                ...options\n            });\n        }\n        const txResponse = await this.contract.performCreate2(value, deploymentData, salt, options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async performCreate(value, deploymentData, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('performCreate', [value, deploymentData], {\n                ...options\n            });\n        }\n        const txResponse = await this.contract.performCreate(value, deploymentData, options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async estimateGas(methodName, params, options) {\n        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n    }\n}\nexports.default = CreateCallEthersContract;\n//# sourceMappingURL=CreateCallEthersContract.js.map"]},"metadata":{},"sourceType":"script"}