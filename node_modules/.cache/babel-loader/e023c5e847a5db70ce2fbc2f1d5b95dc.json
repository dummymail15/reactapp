{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateTypedData = exports.getEip712MessageTypes = exports.EIP712_DOMAIN = exports.EIP712_DOMAIN_BEFORE_V130 = void 0;\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nconst satisfies_1 = __importDefault(require(\"semver/functions/satisfies\"));\n\nconst EQ_OR_GT_1_3_0 = '>=1.3.0';\nexports.EIP712_DOMAIN_BEFORE_V130 = [{\n  type: 'address',\n  name: 'verifyingContract'\n}];\nexports.EIP712_DOMAIN = [{\n  type: 'uint256',\n  name: 'chainId'\n}, {\n  type: 'address',\n  name: 'verifyingContract'\n}]; // This function returns the types structure for signing off-chain messages according to EIP-712\n\nfunction getEip712MessageTypes(safeVersion) {\n  const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);\n  return {\n    EIP712Domain: eip712WithChainId ? exports.EIP712_DOMAIN : exports.EIP712_DOMAIN_BEFORE_V130,\n    SafeTx: [{\n      type: 'address',\n      name: 'to'\n    }, {\n      type: 'uint256',\n      name: 'value'\n    }, {\n      type: 'bytes',\n      name: 'data'\n    }, {\n      type: 'uint8',\n      name: 'operation'\n    }, {\n      type: 'uint256',\n      name: 'safeTxGas'\n    }, {\n      type: 'uint256',\n      name: 'baseGas'\n    }, {\n      type: 'uint256',\n      name: 'gasPrice'\n    }, {\n      type: 'address',\n      name: 'gasToken'\n    }, {\n      type: 'address',\n      name: 'refundReceiver'\n    }, {\n      type: 'uint256',\n      name: 'nonce'\n    }]\n  };\n}\n\nexports.getEip712MessageTypes = getEip712MessageTypes;\n\nfunction generateTypedData(_ref) {\n  let {\n    safeAddress,\n    safeVersion,\n    chainId,\n    safeTransactionData\n  } = _ref;\n  const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);\n  const typedData = {\n    types: getEip712MessageTypes(safeVersion),\n    domain: {\n      verifyingContract: safeAddress\n    },\n    primaryType: 'SafeTx',\n    message: { ...safeTransactionData,\n      value: bignumber_1.BigNumber.from(safeTransactionData.value),\n      safeTxGas: bignumber_1.BigNumber.from(safeTransactionData.safeTxGas),\n      baseGas: bignumber_1.BigNumber.from(safeTransactionData.baseGas),\n      gasPrice: bignumber_1.BigNumber.from(safeTransactionData.gasPrice),\n      nonce: bignumber_1.BigNumber.from(safeTransactionData.nonce)\n    }\n  };\n\n  if (eip712WithChainId) {\n    typedData.domain.chainId = chainId;\n  }\n\n  return typedData;\n}\n\nexports.generateTypedData = generateTypedData;","map":{"version":3,"sources":["../../../src/eip-712/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateTypedData = exports.getEip712MessageTypes = exports.EIP712_DOMAIN = exports.EIP712_DOMAIN_BEFORE_V130 = void 0;\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nconst satisfies_1 = __importDefault(require(\"semver/functions/satisfies\"));\nconst EQ_OR_GT_1_3_0 = '>=1.3.0';\nexports.EIP712_DOMAIN_BEFORE_V130 = [\n    {\n        type: 'address',\n        name: 'verifyingContract'\n    }\n];\nexports.EIP712_DOMAIN = [\n    {\n        type: 'uint256',\n        name: 'chainId'\n    },\n    {\n        type: 'address',\n        name: 'verifyingContract'\n    }\n];\n// This function returns the types structure for signing off-chain messages according to EIP-712\nfunction getEip712MessageTypes(safeVersion) {\n    const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);\n    return {\n        EIP712Domain: eip712WithChainId ? exports.EIP712_DOMAIN : exports.EIP712_DOMAIN_BEFORE_V130,\n        SafeTx: [\n            { type: 'address', name: 'to' },\n            { type: 'uint256', name: 'value' },\n            { type: 'bytes', name: 'data' },\n            { type: 'uint8', name: 'operation' },\n            { type: 'uint256', name: 'safeTxGas' },\n            { type: 'uint256', name: 'baseGas' },\n            { type: 'uint256', name: 'gasPrice' },\n            { type: 'address', name: 'gasToken' },\n            { type: 'address', name: 'refundReceiver' },\n            { type: 'uint256', name: 'nonce' }\n        ]\n    };\n}\nexports.getEip712MessageTypes = getEip712MessageTypes;\nfunction generateTypedData({ safeAddress, safeVersion, chainId, safeTransactionData }) {\n    const eip712WithChainId = (0, satisfies_1.default)(safeVersion, EQ_OR_GT_1_3_0);\n    const typedData = {\n        types: getEip712MessageTypes(safeVersion),\n        domain: {\n            verifyingContract: safeAddress\n        },\n        primaryType: 'SafeTx',\n        message: {\n            ...safeTransactionData,\n            value: bignumber_1.BigNumber.from(safeTransactionData.value),\n            safeTxGas: bignumber_1.BigNumber.from(safeTransactionData.safeTxGas),\n            baseGas: bignumber_1.BigNumber.from(safeTransactionData.baseGas),\n            gasPrice: bignumber_1.BigNumber.from(safeTransactionData.gasPrice),\n            nonce: bignumber_1.BigNumber.from(safeTransactionData.nonce)\n        }\n    };\n    if (eip712WithChainId) {\n        typedData.domain.chainId = chainId;\n    }\n    return typedData;\n}\nexports.generateTypedData = generateTypedData;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"script"}