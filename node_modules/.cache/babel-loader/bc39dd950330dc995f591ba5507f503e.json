{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../../utils\");\n\nclass GnosisSafeContractEthers {\n  constructor(contract) {\n    this.contract = contract;\n\n    this.encode = (methodName, params) => {\n      return this.contract.interface.encodeFunctionData(methodName, params);\n    };\n  }\n\n  async getVersion() {\n    return await this.contract.VERSION();\n  }\n\n  getAddress() {\n    return this.contract.address;\n  }\n\n  async getNonce() {\n    return (await this.contract.nonce()).toNumber();\n  }\n\n  async getThreshold() {\n    return (await this.contract.getThreshold()).toNumber();\n  }\n\n  async getOwners() {\n    return this.contract.getOwners();\n  }\n\n  async isOwner(address) {\n    return this.contract.isOwner(address);\n  }\n\n  async getTransactionHash(safeTransactionData) {\n    return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);\n  }\n\n  async approvedHashes(ownerAddress, hash) {\n    return this.contract.approvedHashes(ownerAddress, hash);\n  }\n\n  async approveHash(hash, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('approveHash', [hash], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.approveHash(hash, options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async isValidTransaction(safeTransaction, options) {\n    let isTxValid = false;\n\n    try {\n      if (options && !options.gasLimit) {\n        options.gasLimit = await this.estimateGas('execTransaction', [safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()], { ...options\n        });\n      }\n\n      isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n    } catch {}\n\n    return isTxValid;\n  }\n\n  async execTransaction(safeTransaction, options) {\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('execTransaction', [safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures()], { ...options\n      });\n    }\n\n    const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n    return (0, utils_1.toTxResult)(txResponse, options);\n  }\n\n  async estimateGas(methodName, params, options) {\n    return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n  }\n\n}\n\nexports.default = GnosisSafeContractEthers;","map":{"version":3,"sources":["../../../../src/contracts/GnosisSafe/GnosisSafeContractEthers.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../../utils\");\nclass GnosisSafeContractEthers {\n    constructor(contract) {\n        this.contract = contract;\n        this.encode = (methodName, params) => {\n            return this.contract.interface.encodeFunctionData(methodName, params);\n        };\n    }\n    async getVersion() {\n        return (await this.contract.VERSION());\n    }\n    getAddress() {\n        return this.contract.address;\n    }\n    async getNonce() {\n        return (await this.contract.nonce()).toNumber();\n    }\n    async getThreshold() {\n        return (await this.contract.getThreshold()).toNumber();\n    }\n    async getOwners() {\n        return this.contract.getOwners();\n    }\n    async isOwner(address) {\n        return this.contract.isOwner(address);\n    }\n    async getTransactionHash(safeTransactionData) {\n        return this.contract.getTransactionHash(safeTransactionData.to, safeTransactionData.value, safeTransactionData.data, safeTransactionData.operation, safeTransactionData.safeTxGas, safeTransactionData.baseGas, safeTransactionData.gasPrice, safeTransactionData.gasToken, safeTransactionData.refundReceiver, safeTransactionData.nonce);\n    }\n    async approvedHashes(ownerAddress, hash) {\n        return this.contract.approvedHashes(ownerAddress, hash);\n    }\n    async approveHash(hash, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('approveHash', [hash], { ...options });\n        }\n        const txResponse = await this.contract.approveHash(hash, options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async isValidTransaction(safeTransaction, options) {\n        let isTxValid = false;\n        try {\n            if (options && !options.gasLimit) {\n                options.gasLimit = await this.estimateGas('execTransaction', [\n                    safeTransaction.data.to,\n                    safeTransaction.data.value,\n                    safeTransaction.data.data,\n                    safeTransaction.data.operation,\n                    safeTransaction.data.safeTxGas,\n                    safeTransaction.data.baseGas,\n                    safeTransaction.data.gasPrice,\n                    safeTransaction.data.gasToken,\n                    safeTransaction.data.refundReceiver,\n                    safeTransaction.encodedSignatures()\n                ], {\n                    ...options\n                });\n            }\n            isTxValid = await this.contract.callStatic.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n        }\n        catch { }\n        return isTxValid;\n    }\n    async execTransaction(safeTransaction, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('execTransaction', [\n                safeTransaction.data.to,\n                safeTransaction.data.value,\n                safeTransaction.data.data,\n                safeTransaction.data.operation,\n                safeTransaction.data.safeTxGas,\n                safeTransaction.data.baseGas,\n                safeTransaction.data.gasPrice,\n                safeTransaction.data.gasToken,\n                safeTransaction.data.refundReceiver,\n                safeTransaction.encodedSignatures()\n            ], {\n                ...options\n            });\n        }\n        const txResponse = await this.contract.execTransaction(safeTransaction.data.to, safeTransaction.data.value, safeTransaction.data.data, safeTransaction.data.operation, safeTransaction.data.safeTxGas, safeTransaction.data.baseGas, safeTransaction.data.gasPrice, safeTransaction.data.gasToken, safeTransaction.data.refundReceiver, safeTransaction.encodedSignatures(), options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async estimateGas(methodName, params, options) {\n        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n    }\n}\nexports.default = GnosisSafeContractEthers;\n//# sourceMappingURL=GnosisSafeContractEthers.js.map"]},"metadata":{},"sourceType":"script"}