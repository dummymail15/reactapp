{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\n\nclass GnosisSafeProxyFactoryEthersContract {\n  constructor(contract) {\n    this.contract = contract;\n  }\n\n  getAddress() {\n    return this.contract.address;\n  }\n\n  async proxyCreationCode() {\n    return this.contract.proxyCreationCode();\n  }\n\n  async createProxy(_ref) {\n    let {\n      safeMasterCopyAddress,\n      initializer,\n      saltNonce,\n      options,\n      callback\n    } = _ref;\n    if (bignumber_1.BigNumber.from(saltNonce).lt(0)) throw new Error('saltNonce must be greater than or equal to 0');\n\n    if (options && !options.gasLimit) {\n      options.gasLimit = await this.estimateGas('createProxyWithNonce', [safeMasterCopyAddress, initializer, saltNonce], { ...options\n      });\n    }\n\n    const proxyAddress = this.contract.createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options).then(async txResponse => {\n      var _a;\n\n      if (callback) {\n        callback(txResponse.hash);\n      }\n\n      const txReceipt = await txResponse.wait();\n      const proxyCreationEvent = (_a = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.events) === null || _a === void 0 ? void 0 : _a.find(_ref2 => {\n        let {\n          event\n        } = _ref2;\n        return event === 'ProxyCreation';\n      });\n\n      if (!proxyCreationEvent || !proxyCreationEvent.args) {\n        throw new Error('SafeProxy was not deployed correctly');\n      }\n\n      const proxyAddress = proxyCreationEvent.args[0];\n      return proxyAddress;\n    });\n    return proxyAddress;\n  }\n\n  encode(methodName, params) {\n    return this.contract.interface.encodeFunctionData(methodName, params);\n  }\n\n  async estimateGas(methodName, params, options) {\n    return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n  }\n\n}\n\nexports.default = GnosisSafeProxyFactoryEthersContract;","map":{"version":3,"sources":["../../../../src/contracts/GnosisSafeProxyFactory/GnosisSafeProxyFactoryEthersContract.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,WAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAeA,MAAM,oCAAN,CAA0C;AACxC,EAAA,WAAA,CAAmB,QAAnB,EAAsE;AAAnD,SAAA,QAAA,GAAA,QAAA;AAAuD;;AAE1E,EAAA,UAAU,GAAA;AACR,WAAO,KAAK,QAAL,CAAc,OAArB;AACD;;AAEsB,QAAjB,iBAAiB,GAAA;AACrB,WAAO,KAAK,QAAL,CAAc,iBAAd,EAAP;AACD;;AAEgB,QAAX,WAAW,OAME;AAAA,QAND;AAChB,MAAA,qBADgB;AAEhB,MAAA,WAFgB;AAGhB,MAAA,SAHgB;AAIhB,MAAA,OAJgB;AAKhB,MAAA;AALgB,KAMC;AACjB,QAAI,WAAA,CAAA,SAAA,CAAU,IAAV,CAAe,SAAf,EAA0B,EAA1B,CAA6B,CAA7B,CAAJ,EACE,MAAM,IAAI,KAAJ,CAAU,8CAAV,CAAN;;AACF,QAAI,OAAO,IAAI,CAAC,OAAO,CAAC,QAAxB,EAAkC;AAChC,MAAA,OAAO,CAAC,QAAR,GAAmB,MAAM,KAAK,WAAL,CACvB,sBADuB,EAEvB,CAAC,qBAAD,EAAwB,WAAxB,EAAqC,SAArC,CAFuB,EAGvB,EACE,GAAG;AADL,OAHuB,CAAzB;AAOD;;AACD,UAAM,YAAY,GAAG,KAAK,QAAL,CAClB,oBADkB,CACG,qBADH,EAC0B,WAD1B,EACuC,SADvC,EACkD,OADlD,EAElB,IAFkB,CAEb,MAAO,UAAP,IAAqB;;;AACzB,UAAI,QAAJ,EAAc;AACZ,QAAA,QAAQ,CAAC,UAAU,CAAC,IAAZ,CAAR;AACD;;AACD,YAAM,SAAS,GAAG,MAAM,UAAU,CAAC,IAAX,EAAxB;AACA,YAAM,kBAAkB,GAAG,CAAA,EAAA,GAAA,SAAS,KAAA,IAAT,IAAA,SAAS,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAA,SAAS,CAAE,MAAX,MAAiB,IAAjB,IAAiB,EAAA,KAAA,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAiB,EAAA,CAAE,IAAF,CAC1C;AAAA,YAAC;AAAE,UAAA;AAAF,SAAD;AAAA,eAAsB,KAAK,KAAK,eAAhC;AAAA,OAD0C,CAA5C;;AAGA,UAAI,CAAC,kBAAD,IAAuB,CAAC,kBAAkB,CAAC,IAA/C,EAAqD;AACnD,cAAM,IAAI,KAAJ,CAAU,sCAAV,CAAN;AACD;;AACD,YAAM,YAAY,GAAW,kBAAkB,CAAC,IAAnB,CAAwB,CAAxB,CAA7B;AACA,aAAO,YAAP;AACD,KAfkB,CAArB;AAgBA,WAAO,YAAP;AACD;;AAED,EAAA,MAAM,CAAC,UAAD,EAAqB,MAArB,EAAkC;AACtC,WAAQ,KAAK,QAAL,CAAsB,SAAtB,CAAgC,kBAAhC,CAAmD,UAAnD,EAA+D,MAA/D,CAAR;AACD;;AAEgB,QAAX,WAAW,CACf,UADe,EAEf,MAFe,EAGf,OAHe,EAGkB;AAEjC,WAAO,CAAC,MAAO,KAAK,QAAL,CAAc,WAAd,CAAkC,UAAlC,EAA8C,GAAG,MAAjD,EAAyD,OAAzD,CAAR,EAA2E,QAA3E,EAAP;AACD;;AA1DuC;;AA6D1C,OAAA,CAAA,OAAA,GAAe,oCAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_1 = require(\"@ethersproject/bignumber\");\nclass GnosisSafeProxyFactoryEthersContract {\n    constructor(contract) {\n        this.contract = contract;\n    }\n    getAddress() {\n        return this.contract.address;\n    }\n    async proxyCreationCode() {\n        return this.contract.proxyCreationCode();\n    }\n    async createProxy({ safeMasterCopyAddress, initializer, saltNonce, options, callback }) {\n        if (bignumber_1.BigNumber.from(saltNonce).lt(0))\n            throw new Error('saltNonce must be greater than or equal to 0');\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('createProxyWithNonce', [safeMasterCopyAddress, initializer, saltNonce], {\n                ...options\n            });\n        }\n        const proxyAddress = this.contract\n            .createProxyWithNonce(safeMasterCopyAddress, initializer, saltNonce, options)\n            .then(async (txResponse) => {\n            var _a;\n            if (callback) {\n                callback(txResponse.hash);\n            }\n            const txReceipt = await txResponse.wait();\n            const proxyCreationEvent = (_a = txReceipt === null || txReceipt === void 0 ? void 0 : txReceipt.events) === null || _a === void 0 ? void 0 : _a.find(({ event }) => event === 'ProxyCreation');\n            if (!proxyCreationEvent || !proxyCreationEvent.args) {\n                throw new Error('SafeProxy was not deployed correctly');\n            }\n            const proxyAddress = proxyCreationEvent.args[0];\n            return proxyAddress;\n        });\n        return proxyAddress;\n    }\n    encode(methodName, params) {\n        return this.contract.interface.encodeFunctionData(methodName, params);\n    }\n    async estimateGas(methodName, params, options) {\n        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n    }\n}\nexports.default = GnosisSafeProxyFactoryEthersContract;\n//# sourceMappingURL=GnosisSafeProxyFactoryEthersContract.js.map"]},"metadata":{},"sourceType":"script"}