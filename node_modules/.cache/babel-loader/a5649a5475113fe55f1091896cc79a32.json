{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _regeneratorRuntime = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/regenerator\");\n\nvar _objectSpread = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _asyncToGenerator = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _classCallCheck = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar utils_1 = require(\"../../utils\");\n\nvar SignMessageLibEthersContract = /*#__PURE__*/function () {\n  function SignMessageLibEthersContract(contract) {\n    var _this = this;\n\n    _classCallCheck(this, SignMessageLibEthersContract);\n\n    this.contract = contract;\n\n    this.encode = function (methodName, params) {\n      return _this.contract.interface.encodeFunctionData(methodName, params);\n    };\n  }\n\n  _createClass(SignMessageLibEthersContract, [{\n    key: \"getAddress\",\n    value: function getAddress() {\n      return this.contract.address;\n    }\n  }, {\n    key: \"signMessage\",\n    value: function () {\n      var _signMessage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data, options) {\n        var txResponse;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(options && !options.gasLimit)) {\n                  _context.next = 4;\n                  break;\n                }\n\n                _context.next = 3;\n                return this.estimateGas('signMessage', [data], _objectSpread({}, options));\n\n              case 3:\n                options.gasLimit = _context.sent;\n\n              case 4:\n                _context.next = 6;\n                return this.contract.signMessage(data, options);\n\n              case 6:\n                txResponse = _context.sent;\n                return _context.abrupt(\"return\", (0, utils_1.toTxResult)(txResponse, options));\n\n              case 8:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function signMessage(_x, _x2) {\n        return _signMessage.apply(this, arguments);\n      }\n\n      return signMessage;\n    }()\n  }, {\n    key: \"getMessageHash\",\n    value: function () {\n      var _getMessageHash = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(message) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.contract.getMessageHash(message));\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getMessageHash(_x3) {\n        return _getMessageHash.apply(this, arguments);\n      }\n\n      return getMessageHash;\n    }()\n  }, {\n    key: \"estimateGas\",\n    value: function () {\n      var _estimateGas = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(methodName, params, options) {\n        var _this$contract$estima;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return (_this$contract$estima = this.contract.estimateGas)[methodName].apply(_this$contract$estima, _toConsumableArray(params).concat([options]));\n\n              case 2:\n                return _context3.abrupt(\"return\", _context3.sent.toNumber());\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function estimateGas(_x4, _x5, _x6) {\n        return _estimateGas.apply(this, arguments);\n      }\n\n      return estimateGas;\n    }()\n  }]);\n\n  return SignMessageLibEthersContract;\n}();\n\nexports.default = SignMessageLibEthersContract;","map":{"version":3,"sources":["../../../../src/contracts/SignMessageLib/SignMessageLibEthersContract.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAMA,IAAA,OAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;IAEe,4B;AACb,wCAAmB,QAAnB,EAAkD;AAAA;;AAAA;;AAA/B,SAAA,QAAA,GAAA,QAAA;;AAqBnB,SAAA,MAAA,GAAgE,UAC9D,UAD8D,EAE9D,MAF8D,EAGpD;AACV,aAAO,KAAI,CAAC,QAAL,CAAc,SAAd,CAAwB,kBAAxB,CAA2C,UAA3C,EAAuD,MAAvD,CAAP;AACD,KALD;AArBsD;;;;WAEtD,sBAAU;AACR,aAAO,KAAK,QAAL,CAAc,OAArB;AACD;;;;kFAED,iBACE,IADF,EAEE,OAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIM,OAAO,IAAI,CAAC,OAAO,CAAC,QAJ1B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAK6B,KAAK,WAAL,CAAiB,aAAjB,EAAgC,CAAC,IAAD,CAAhC,oBAA6C,OAA7C,EAL7B;;AAAA;AAKI,gBAAA,OAAO,CAAC,QALZ;;AAAA;AAAA;AAAA,uBAO2B,KAAK,QAAL,CAAc,WAAd,CAA0B,IAA1B,EAAgC,OAAhC,CAP3B;;AAAA;AAOQ,gBAAA,UAPR;AAAA,iDAQS,CAAA,GAAA,OAAA,CAAA,UAAA,EAAW,UAAX,EAAuB,OAAvB,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;qFAWA,kBAAqB,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA,kDACS,KAAK,QAAL,CAAc,cAAd,CAA6B,OAA7B,CADT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;kFAWA,kBACE,UADF,EAEE,MAFF,EAGE,OAHF;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKiB,8BAAK,QAAL,CAAc,WAAd,EAAkC,UAAlC,kDAAiD,MAAjD,UAAyD,OAAzD,GALjB;;AAAA;AAAA,iEAKoF,QALpF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;;AASF,OAAA,CAAA,OAAA,GAAe,4BAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../../utils\");\nclass SignMessageLibEthersContract {\n    constructor(contract) {\n        this.contract = contract;\n        this.encode = (methodName, params) => {\n            return this.contract.interface.encodeFunctionData(methodName, params);\n        };\n    }\n    getAddress() {\n        return this.contract.address;\n    }\n    async signMessage(data, options) {\n        if (options && !options.gasLimit) {\n            options.gasLimit = await this.estimateGas('signMessage', [data], { ...options });\n        }\n        const txResponse = await this.contract.signMessage(data, options);\n        return (0, utils_1.toTxResult)(txResponse, options);\n    }\n    async getMessageHash(message) {\n        return this.contract.getMessageHash(message);\n    }\n    async estimateGas(methodName, params, options) {\n        return (await this.contract.estimateGas[methodName](...params, options)).toNumber();\n    }\n}\nexports.default = SignMessageLibEthersContract;\n//# sourceMappingURL=SignMessageLibEthersContract.js.map"]},"metadata":{},"sourceType":"script"}