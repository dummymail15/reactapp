{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\n\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\n\nvar _OwnerManager_ethAdapter, _OwnerManager_safeContract;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass OwnerManager {\n  constructor(ethAdapter, safeContract) {\n    _OwnerManager_ethAdapter.set(this, void 0);\n\n    _OwnerManager_safeContract.set(this, void 0);\n\n    __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, \"f\");\n\n    __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, \"f\");\n  }\n\n  validateOwnerAddress(ownerAddress, errorMessage) {\n    const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, \"f\").isAddress(ownerAddress);\n\n    if (!isValidAddress || (0, utils_1.isRestrictedAddress)(ownerAddress)) {\n      throw new Error(errorMessage || 'Invalid owner address provided');\n    }\n  }\n\n  validateThreshold(threshold, numOwners) {\n    if (threshold <= 0) {\n      throw new Error('Threshold needs to be greater than 0');\n    }\n\n    if (threshold > numOwners) {\n      throw new Error('Threshold cannot exceed owner count');\n    }\n  }\n\n  validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {\n    const ownerIndex = owners.findIndex(owner => (0, utils_1.sameString)(owner, ownerAddress));\n    const isOwner = ownerIndex >= 0;\n\n    if (isOwner) {\n      throw new Error(errorMessage || 'Address provided is already an owner');\n    }\n  }\n\n  validateAddressIsOwner(ownerAddress, owners, errorMessage) {\n    const ownerIndex = owners.findIndex(owner => (0, utils_1.sameString)(owner, ownerAddress));\n    const isOwner = ownerIndex >= 0;\n\n    if (!isOwner) {\n      throw new Error(errorMessage || 'Address provided is not an owner');\n    }\n\n    return ownerIndex;\n  }\n\n  async getOwners() {\n    const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getOwners();\n    return [...owners];\n  }\n\n  async getThreshold() {\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getThreshold();\n  }\n\n  async isOwner(ownerAddress) {\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").isOwner(ownerAddress);\n  }\n\n  async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {\n    this.validateOwnerAddress(ownerAddress);\n    const owners = await this.getOwners();\n    this.validateAddressIsNotOwner(ownerAddress, owners);\n    const newThreshold = threshold !== null && threshold !== void 0 ? threshold : await this.getThreshold();\n    this.validateThreshold(newThreshold, owners.length + 1);\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('addOwnerWithThreshold', [ownerAddress, newThreshold]);\n  }\n\n  async encodeRemoveOwnerData(ownerAddress, threshold) {\n    this.validateOwnerAddress(ownerAddress);\n    const owners = await this.getOwners();\n    const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);\n    const newThreshold = threshold !== null && threshold !== void 0 ? threshold : (await this.getThreshold()) - 1;\n    this.validateThreshold(newThreshold, owners.length - 1);\n    const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('removeOwner', [prevOwnerAddress, ownerAddress, newThreshold]);\n  }\n\n  async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {\n    this.validateOwnerAddress(newOwnerAddress, 'Invalid new owner address provided');\n    this.validateOwnerAddress(oldOwnerAddress, 'Invalid old owner address provided');\n    const owners = await this.getOwners();\n    this.validateAddressIsNotOwner(newOwnerAddress, owners, 'New address provided is already an owner');\n    const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, 'Old address provided is not an owner');\n    const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('swapOwner', [prevOwnerAddress, oldOwnerAddress, newOwnerAddress]);\n  }\n\n  async encodeChangeThresholdData(threshold) {\n    const owners = await this.getOwners();\n    this.validateThreshold(threshold, owners.length);\n    return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('changeThreshold', [threshold]);\n  }\n\n}\n\n_OwnerManager_ethAdapter = new WeakMap(), _OwnerManager_safeContract = new WeakMap();\nexports.default = OwnerManager;","map":{"version":3,"sources":["../../../src/managers/ownerManager.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n};\nvar __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _OwnerManager_ethAdapter, _OwnerManager_safeContract;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"../utils\");\nconst constants_1 = require(\"../utils/constants\");\nclass OwnerManager {\n    constructor(ethAdapter, safeContract) {\n        _OwnerManager_ethAdapter.set(this, void 0);\n        _OwnerManager_safeContract.set(this, void 0);\n        __classPrivateFieldSet(this, _OwnerManager_ethAdapter, ethAdapter, \"f\");\n        __classPrivateFieldSet(this, _OwnerManager_safeContract, safeContract, \"f\");\n    }\n    validateOwnerAddress(ownerAddress, errorMessage) {\n        const isValidAddress = __classPrivateFieldGet(this, _OwnerManager_ethAdapter, \"f\").isAddress(ownerAddress);\n        if (!isValidAddress || (0, utils_1.isRestrictedAddress)(ownerAddress)) {\n            throw new Error(errorMessage || 'Invalid owner address provided');\n        }\n    }\n    validateThreshold(threshold, numOwners) {\n        if (threshold <= 0) {\n            throw new Error('Threshold needs to be greater than 0');\n        }\n        if (threshold > numOwners) {\n            throw new Error('Threshold cannot exceed owner count');\n        }\n    }\n    validateAddressIsNotOwner(ownerAddress, owners, errorMessage) {\n        const ownerIndex = owners.findIndex((owner) => (0, utils_1.sameString)(owner, ownerAddress));\n        const isOwner = ownerIndex >= 0;\n        if (isOwner) {\n            throw new Error(errorMessage || 'Address provided is already an owner');\n        }\n    }\n    validateAddressIsOwner(ownerAddress, owners, errorMessage) {\n        const ownerIndex = owners.findIndex((owner) => (0, utils_1.sameString)(owner, ownerAddress));\n        const isOwner = ownerIndex >= 0;\n        if (!isOwner) {\n            throw new Error(errorMessage || 'Address provided is not an owner');\n        }\n        return ownerIndex;\n    }\n    async getOwners() {\n        const owners = await __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getOwners();\n        return [...owners];\n    }\n    async getThreshold() {\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").getThreshold();\n    }\n    async isOwner(ownerAddress) {\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").isOwner(ownerAddress);\n    }\n    async encodeAddOwnerWithThresholdData(ownerAddress, threshold) {\n        this.validateOwnerAddress(ownerAddress);\n        const owners = await this.getOwners();\n        this.validateAddressIsNotOwner(ownerAddress, owners);\n        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : (await this.getThreshold());\n        this.validateThreshold(newThreshold, owners.length + 1);\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('addOwnerWithThreshold', [ownerAddress, newThreshold]);\n    }\n    async encodeRemoveOwnerData(ownerAddress, threshold) {\n        this.validateOwnerAddress(ownerAddress);\n        const owners = await this.getOwners();\n        const ownerIndex = this.validateAddressIsOwner(ownerAddress, owners);\n        const newThreshold = threshold !== null && threshold !== void 0 ? threshold : (await this.getThreshold()) - 1;\n        this.validateThreshold(newThreshold, owners.length - 1);\n        const prevOwnerAddress = ownerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[ownerIndex - 1];\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('removeOwner', [prevOwnerAddress, ownerAddress, newThreshold]);\n    }\n    async encodeSwapOwnerData(oldOwnerAddress, newOwnerAddress) {\n        this.validateOwnerAddress(newOwnerAddress, 'Invalid new owner address provided');\n        this.validateOwnerAddress(oldOwnerAddress, 'Invalid old owner address provided');\n        const owners = await this.getOwners();\n        this.validateAddressIsNotOwner(newOwnerAddress, owners, 'New address provided is already an owner');\n        const oldOwnerIndex = this.validateAddressIsOwner(oldOwnerAddress, owners, 'Old address provided is not an owner');\n        const prevOwnerAddress = oldOwnerIndex === 0 ? constants_1.SENTINEL_ADDRESS : owners[oldOwnerIndex - 1];\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('swapOwner', [\n            prevOwnerAddress,\n            oldOwnerAddress,\n            newOwnerAddress\n        ]);\n    }\n    async encodeChangeThresholdData(threshold) {\n        const owners = await this.getOwners();\n        this.validateThreshold(threshold, owners.length);\n        return __classPrivateFieldGet(this, _OwnerManager_safeContract, \"f\").encode('changeThreshold', [threshold]);\n    }\n}\n_OwnerManager_ethAdapter = new WeakMap(), _OwnerManager_safeContract = new WeakMap();\nexports.default = OwnerManager;\n//# sourceMappingURL=ownerManager.js.map"]},"metadata":{},"sourceType":"script"}