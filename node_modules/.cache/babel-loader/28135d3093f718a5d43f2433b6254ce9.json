{"ast":null,"code":"import _regeneratorRuntime from\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/home/ravi/coinflip/coin-flip-test-main/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{React,useState,useEffect}from'react';import{ethers}from'ethers';import styles from'./Wallet.module.css';import simple_token_abi from'./Contracts/simple_token_abi.json';import Interactions from'./Interactions';import Interactions1 from'./Interactions1';import EthersAdapter from'@safe-global/safe-ethers-lib';import Safe,{SafeFactory,EthSignSignature}from'@safe-global/safe-core-sdk';import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var Wallet=function Wallet(){// ganache-cli address\nvar contractAddress='0xad86835f962a1F28aB3bafa771aaf5C86eC6D40d';var _useState=useState(\"Coin Flip Game\"),_useState2=_slicedToArray(_useState,2),tokenName=_useState2[0],setTokenName=_useState2[1];var _useState3=useState(\"Connect Wallet\"),_useState4=_slicedToArray(_useState3,2),connButtonText=_useState4[0],setConnButtonText=_useState4[1];var _useState5=useState(null),_useState6=_slicedToArray(_useState5,2),errorMessage=_useState6[0],setErrorMessage=_useState6[1];var _useState7=useState(null),_useState8=_slicedToArray(_useState7,2),defaultAccount=_useState8[0],setDefaultAccount=_useState8[1];var _useState9=useState(null),_useState10=_slicedToArray(_useState9,2),balance=_useState10[0],setBalance=_useState10[1];var _useState11=useState(null),_useState12=_slicedToArray(_useState11,2),provider=_useState12[0],setProvider=_useState12[1];var _useState13=useState(null),_useState14=_slicedToArray(_useState13,2),signer=_useState14[0],setSigner=_useState14[1];var _useState15=useState(null),_useState16=_slicedToArray(_useState15,2),contract=_useState16[0],setContract=_useState16[1];var connectWalletHandler=function connectWalletHandler(){if(window.ethereum&&window.ethereum.isMetaMask){window.ethereum.request({method:'eth_requestAccounts'}).then(function(result){accountChangedHandler(result[0]);setConnButtonText('Wallet Connected');}).catch(function(error){setErrorMessage(error.message);});}else{console.log('need to install metamask');setErrorMessage('Please install MetaMask');}};var accountChangedHandler=function accountChangedHandler(newAddress){setDefaultAccount(newAddress);updateEthers();};var updateEthers=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var tempProvider,tempSigner,ethAdapter,safeFactory,owners,threshold,safeAccountConfig,safeSdk_ceo,treasury;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:tempProvider=new ethers.providers.Web3Provider(window.ethereum);tempSigner=tempProvider.getSigner();ethAdapter=new EthersAdapter({ethers:ethers,signerOrProvider:tempSigner});_context.next=5;return SafeFactory.create({ethAdapter:ethAdapter});case 5:safeFactory=_context.sent;owners=['0xb67c267A0D15547f4C675318111A0492e1bCEB5f','0xA0c97D5164b953c731bFFB7d0BAe88eE2417e064'];threshold=2;console.log(\"safeFactory  \",safeFactory);safeAccountConfig={owners:owners,threshold:threshold};_context.next=12;return safeFactory.deploySafe({safeAccountConfig:safeAccountConfig});case 12:safeSdk_ceo=_context.sent;console.log(\"treasury 2  \",safeSdk_ceo);// Getting the address of the safe\ntreasury=safeSdk_ceo.getAddress();console.log(\"treasury   \",treasury);//\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner)\nsetProvider(tempProvider);setSigner(tempSigner);setContract(ethAdapter);case 19:case\"end\":return _context.stop();}}},_callee);}));return function updateEthers(){return _ref.apply(this,arguments);};}();useEffect(function(){if(contract!=null){//\tupdateBalance();\n//\tupdateTokenName();\n}},[contract]);var updateBalance=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var balanceBigN,balanceNumber;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return contract.getuserBalance();case 2:balanceBigN=_context2.sent;balanceNumber=balanceBigN.toNumber();//\tlet decimals = await contract.decimals();\n//\tlet tokenBalance = balanceNumber / Math.pow(10, decimals);\nsetBalance(balanceNumber);console.log(balanceNumber);case 6:case\"end\":return _context2.stop();}}},_callee2);}));return function updateBalance(){return _ref2.apply(this,arguments);};}();var updateTokenName=/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var betBoolean,txt;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:betBoolean=true;console.log(betBoolean);_context3.next=4;return contract.flip(betBoolean);case 4:txt=_context3.sent;console.log(txt);case 6:case\"end\":return _context3.stop();}}},_callee3);}));return function updateTokenName(){return _ref3.apply(this,arguments);};}();return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\" \",tokenName,\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" \",\"Refresh the page after performing any action.\",\" \"]}),/*#__PURE__*/_jsxs(\"h2\",{children:[\" \",\"Step-1. Connect your metamask by clicking below\",\" \"]}),/*#__PURE__*/_jsx(\"button\",{className:styles.button6,onClick:connectWalletHandler,children:connButtonText}),/*#__PURE__*/_jsxs(\"div\",{className:styles.walletCard,children:[/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"h3\",{children:[\"Address: \",defaultAccount]})}),/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"h3\",{children:[tokenName,\" User Balance: \",balance]})}),errorMessage]})]});};export default Wallet;","map":{"version":3,"sources":["/home/ravi/coinflip/coin-flip-test-main/src/Wallet.js"],"names":["React","useState","useEffect","ethers","styles","simple_token_abi","Interactions","Interactions1","EthersAdapter","Safe","SafeFactory","EthSignSignature","Wallet","contractAddress","tokenName","setTokenName","connButtonText","setConnButtonText","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","balance","setBalance","provider","setProvider","signer","setSigner","contract","setContract","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAddress","updateEthers","tempProvider","providers","Web3Provider","tempSigner","getSigner","ethAdapter","signerOrProvider","create","safeFactory","owners","threshold","safeAccountConfig","deploySafe","safeSdk_ceo","treasury","getAddress","updateBalance","getuserBalance","balanceBigN","balanceNumber","toNumber","updateTokenName","betBoolean","flip","txt","button6","walletCard"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\nimport simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport Interactions1 from './Interactions1';\nimport EthersAdapter from '@safe-global/safe-ethers-lib'\nimport Safe, { SafeFactory, EthSignSignature } from '@safe-global/safe-core-sdk'\n\nconst Wallet = () => {\n\n\t// ganache-cli address\n\tconst contractAddress = '0xad86835f962a1F28aB3bafa771aaf5C86eC6D40d';\n\n\tconst [tokenName, setTokenName] = useState(\"Coin Flip Game\");\n\tconst [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [balance, setBalance] = useState(null);\n\n\tconst [provider, setProvider] = useState(null);\n\tconst [signer, setSigner] = useState(null);\n\tconst [contract, setContract] = useState(null);\n\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\n\t\t\twindow.ethereum.request({method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t})\n\n\n\t\t} else {\n\t\t\tconsole.log('need to install metamask');\n\t\t\tsetErrorMessage('Please install MetaMask');\n\t\t}\n\t}\n\n\n\n\n\n\tconst accountChangedHandler = (newAddress) => {\n\t\tsetDefaultAccount(newAddress);\n\t\tupdateEthers();\n\t}\n\n\tconst updateEthers = async () => {\n\t\tlet tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n\t\tlet tempSigner = tempProvider.getSigner();\n\n\n\t\tconst ethAdapter = new EthersAdapter({\n\t\t\tethers,\n\t\t\tsignerOrProvider: tempSigner\n\t\t})\n\n\t\tconst safeFactory = await SafeFactory.create({ ethAdapter });\n\n\t\tconst owners = ['0xb67c267A0D15547f4C675318111A0492e1bCEB5f', '0xA0c97D5164b953c731bFFB7d0BAe88eE2417e064'];\n\t\tconst threshold = 2;\n\t\t\n\t\tconsole.log(\"safeFactory  \",safeFactory);\n\n\t\tconst safeAccountConfig = { owners: owners, threshold: threshold};\n\t \n\t\t\tconst safeSdk_ceo = await safeFactory.deploySafe({safeAccountConfig});\n\t\n\t\t\n\t\t\n\t\tconsole.log(\"treasury 2  \",safeSdk_ceo);\n\t\n\t\n\t\t  // Getting the address of the safe\n\t\t  const treasury = safeSdk_ceo.getAddress();\n\t\t\n\t\t\n\t\t  console.log(\"treasury   \",treasury);\n\n\n\t//\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner)\n\n\t\tsetProvider(tempProvider);\n\t\tsetSigner(tempSigner);\n\t\tsetContract(ethAdapter);\n\t}\n\n\tuseEffect(() => {\n\t\tif (contract != null) {\n\t\t//\tupdateBalance();\n\t\t//\tupdateTokenName();\n\t\t}\n\t}, [contract])\n\n\tconst updateBalance = async () => {\n\t\tlet balanceBigN = await contract.getuserBalance();\n\t\tlet balanceNumber = balanceBigN.toNumber();\n\n\t//\tlet decimals = await contract.decimals();\n\n\t//\tlet tokenBalance = balanceNumber / Math.pow(10, decimals);\n\n\t\tsetBalance(balanceNumber);\n\t\tconsole.log(balanceNumber);\n\t}\n\n\tconst updateTokenName = async () => {\n\n\t\t\n\t\tlet betBoolean = true;\n\t\tconsole.log(betBoolean)\n\t\tlet txt = await contract.flip(betBoolean);\n\t\tconsole.log(txt);\n\t}\n\t\nreturn (\n\t<div>\n\t\t<h2> {tokenName} </h2>\n\t\t\t<h2> {\"Refresh the page after performing any action.\"} </h2>\n\t\t<h2> {\"Step-1. Connect your metamask by clicking below\"} </h2>\n\t\t<button className={styles.button6} onClick={connectWalletHandler}>{connButtonText}</button>\n\n\t\t<div className = {styles.walletCard}>\n\t\t\t<div>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<h3>{tokenName} User Balance: {balance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t\t</div>\n\n\t\t{/* <Interactions1 contract={contract}/> */}\n\t\t\t{/* <Interactions contract={contract}/> */}\n\n\t\t\n\t</div>\n\t);\n}\n\nexport default Wallet;"]},"metadata":{},"sourceType":"module"}