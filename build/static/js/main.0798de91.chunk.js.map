{"version":3,"sources":["Wallet.module.css","logo.svg","Wallet.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Wallet","useState","tokenName","connButtonText","setConnButtonText","errorMessage","setErrorMessage","defaultAccount","setDefaultAccount","balance","setProvider","setSigner","contract","setContract","accountChangedHandler","newAddress","updateEthers","a","tempProvider","ethers","providers","Web3Provider","window","ethereum","tempSigner","getSigner","ethAdapter","EthersAdapter","signerOrProvider","SafeFactory","create","safeFactory","owners","console","log","safeAccountConfig","threshold","deploySafe","safeSdk_ceo","treasury","getAddress","useEffect","className","styles","button6","onClick","isMetaMask","request","method","then","result","catch","error","message","walletCard","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kXACAA,EAAOC,QAAU,CAAC,WAAa,2BAA2B,iBAAmB,iCAAiC,aAAe,6BAA6B,QAAU,0B,yFCDrJ,I,0GCmJAC,EA1IA,WAGd,IAEA,EAAkCC,mBAAS,kBAA3C,mBAAOC,EAAP,KACA,GADA,KAC4CD,mBAAS,mBAArD,mBAAOE,EAAP,KAAuBC,EAAvB,KACA,EAAwCH,mBAAS,MAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAA4CL,mBAAS,MAArD,mBAAOM,EAAP,KAAuBC,EAAvB,KACA,EAA8BP,mBAAS,MAAvC,mBAAOQ,EAAP,KAEA,GAFA,KAEgCR,mBAAS,OAAzC,mBAAiBS,GAAjB,WACA,EAA4BT,mBAAS,MAArC,mBAAeU,GAAf,WACA,EAAgCV,mBAAS,MAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KA0BMC,EAAwB,SAACC,GAC9BP,EAAkBO,GAClBC,KAGKA,EAAY,uCAAG,0CAAAC,EAAA,6DAChBC,EAAe,IAAIC,SAAOC,UAAUC,aAAaC,OAAOC,UAExDC,EAAaN,EAAaO,YAGxBC,EAAa,IAAIC,IAAc,CACpCR,gBACAS,iBAAkBJ,IARC,SAWMK,cAAYC,OAAO,CAAEJ,eAX3B,cAWdK,EAXc,OAadC,EAAS,CAAC,6CAA8C,8CAC5C,EAElBC,QAAQC,IAAI,gBAAgBH,GAEtBI,EAAoB,CAAEH,OAAQA,EAAQI,UAJ1B,GAdE,UAoBOL,EAAYM,WAAW,CAACF,sBApB/B,QAoBbG,EApBa,OAwBpBL,QAAQC,IAAI,eAAeI,GAInBC,EAAWD,EAAYE,aAG7BP,QAAQC,IAAI,cAAcK,GAK5B7B,EAAYQ,GACZP,EAAUa,GACVX,EAAYa,GAtCQ,4CAAH,qDAyClBe,qBAAU,cAKP,CAAC7B,IAuBL,OACC,gCACC,mCAAMV,EAAN,OACC,mCAAM,gDAAN,OACD,mCAAM,kDAAN,OACA,wBAAQwC,UAAWC,IAAOC,QAASC,QAtGP,WACxBvB,OAAOC,UAAYD,OAAOC,SAASuB,WAEtCxB,OAAOC,SAASwB,QAAQ,CAACC,OAAQ,wBAChCC,MAAK,SAAAC,GACLpC,EAAsBoC,EAAO,IAC7B9C,EAAkB,uBAElB+C,OAAM,SAAAC,GACN9C,EAAgB8C,EAAMC,aAKvBpB,QAAQC,IAAI,4BACZ5B,EAAgB,6BAuFjB,SAAmEH,IAEnE,sBAAKuC,UAAaC,IAAOW,WAAzB,UACC,8BACC,2CAAc/C,OAEf,8BACC,+BAAKL,EAAL,kBAA+BO,OAE/BJ,SC5HWkD,MARf,WACE,OACE,qBAAKb,UAAU,MAAf,SACE,cAAC,EAAD,OCKSc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBT,MAAK,YAAkD,IAA/CU,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0798de91.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"walletCard\":\"Wallet_walletCard__32M6q\",\"interactionsCard\":\"Wallet_interactionsCard__1eemh\",\"addressInput\":\"Wallet_addressInput__3SzVk\",\"button6\":\"Wallet_button6__12Gvx\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\nimport simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport Interactions1 from './Interactions1';\nimport EthersAdapter from '@safe-global/safe-ethers-lib'\nimport Safe, { SafeFactory, EthSignSignature } from '@safe-global/safe-core-sdk'\n\nconst Wallet = () => {\n\n\t// ganache-cli address\n\tconst contractAddress = '0xad86835f962a1F28aB3bafa771aaf5C86eC6D40d';\n\n\tconst [tokenName, setTokenName] = useState(\"Coin Flip Game\");\n\tconst [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [defaultAccount, setDefaultAccount] = useState(null);\n\tconst [balance, setBalance] = useState(null);\n\n\tconst [provider, setProvider] = useState(null);\n\tconst [signer, setSigner] = useState(null);\n\tconst [contract, setContract] = useState(null);\n\n\n\tconst connectWalletHandler = () => {\n\t\tif (window.ethereum && window.ethereum.isMetaMask) {\n\n\t\t\twindow.ethereum.request({method: 'eth_requestAccounts'})\n\t\t\t.then(result => {\n\t\t\t\taccountChangedHandler(result[0]);\n\t\t\t\tsetConnButtonText('Wallet Connected');\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tsetErrorMessage(error.message);\n\t\t\t})\n\n\n\t\t} else {\n\t\t\tconsole.log('need to install metamask');\n\t\t\tsetErrorMessage('Please install MetaMask');\n\t\t}\n\t}\n\n\n\n\n\n\tconst accountChangedHandler = (newAddress) => {\n\t\tsetDefaultAccount(newAddress);\n\t\tupdateEthers();\n\t}\n\n\tconst updateEthers = async () => {\n\t\tlet tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n\t\tlet tempSigner = tempProvider.getSigner();\n\n\n\t\tconst ethAdapter = new EthersAdapter({\n\t\t\tethers,\n\t\t\tsignerOrProvider: tempSigner\n\t\t})\n\n\t\tconst safeFactory = await SafeFactory.create({ ethAdapter });\n\n\t\tconst owners = ['0xb67c267A0D15547f4C675318111A0492e1bCEB5f', '0xA0c97D5164b953c731bFFB7d0BAe88eE2417e064'];\n\t\tconst threshold = 2;\n\t\t\n\t\tconsole.log(\"safeFactory  \",safeFactory);\n\n\t\tconst safeAccountConfig = { owners: owners, threshold: threshold};\n\t \n\t\t\tconst safeSdk_ceo = await safeFactory.deploySafe({safeAccountConfig});\n\t\n\t\t\n\t\t\n\t\tconsole.log(\"treasury 2  \",safeSdk_ceo);\n\t\n\t\n\t\t  // Getting the address of the safe\n\t\t  const treasury = safeSdk_ceo.getAddress();\n\t\t\n\t\t\n\t\t  console.log(\"treasury   \",treasury);\n\n\n\t//\tlet tempContract = new ethers.Contract(contractAddress, simple_token_abi, tempSigner)\n\n\t\tsetProvider(tempProvider);\n\t\tsetSigner(tempSigner);\n\t\tsetContract(ethAdapter);\n\t}\n\n\tuseEffect(() => {\n\t\tif (contract != null) {\n\t\t//\tupdateBalance();\n\t\t//\tupdateTokenName();\n\t\t}\n\t}, [contract])\n\n\tconst updateBalance = async () => {\n\t\tlet balanceBigN = await contract.getuserBalance();\n\t\tlet balanceNumber = balanceBigN.toNumber();\n\n\t//\tlet decimals = await contract.decimals();\n\n\t//\tlet tokenBalance = balanceNumber / Math.pow(10, decimals);\n\n\t\tsetBalance(balanceNumber);\n\t\tconsole.log(balanceNumber);\n\t}\n\n\tconst updateTokenName = async () => {\n\n\t\t\n\t\tlet betBoolean = true;\n\t\tconsole.log(betBoolean)\n\t\tlet txt = await contract.flip(betBoolean);\n\t\tconsole.log(txt);\n\t}\n\t\nreturn (\n\t<div>\n\t\t<h2> {tokenName} </h2>\n\t\t\t<h2> {\"Refresh the page after performing any action.\"} </h2>\n\t\t<h2> {\"Step-1. Connect your metamask by clicking below\"} </h2>\n\t\t<button className={styles.button6} onClick={connectWalletHandler}>{connButtonText}</button>\n\n\t\t<div className = {styles.walletCard}>\n\t\t\t<div>\n\t\t\t\t<h3>Address: {defaultAccount}</h3>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<h3>{tokenName} User Balance: {balance}</h3>\n\t\t\t</div>\n\t\t\t{errorMessage}\n\t\t\t</div>\n\n\t\t{/* <Interactions1 contract={contract}/> */}\n\t\t\t{/* <Interactions contract={contract}/> */}\n\n\t\t\n\t</div>\n\t);\n}\n\nexport default Wallet;","import logo from './logo.svg';\nimport './App.css';\nimport Wallet from './Wallet.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Wallet/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}